{"@t":"2022-09-17T22:31:30.2788007Z","@mt":"Starting host","MachineName":"DESKTOP-RLSPV8H","Assembly":"Iot.WebApi"}
{"@t":"2022-09-17T22:31:36.6868259Z","@mt":"Host terminated unexpectedly","@l":"Fatal","@x":"Microsoft.EntityFrameworkCore.DbUpdateException: An error occurred while saving the entity changes. See the inner exception for details.\r\n ---> Microsoft.Data.SqlClient.SqlException (0x80131904): 当 IDENTITY_INSERT 设置为 OFF 时，不能为表 'Products' 中的标识列插入显式值。\r\n   at Microsoft.Data.SqlClient.SqlCommand.<>c.<ExecuteDbDataReaderAsync>b__188_0(Task`1 result)\r\n   at System.Threading.Tasks.ContinuationResultTaskFromResultTask`2.InnerInvoke()\r\n   at System.Threading.Tasks.Task.<>c.<.cctor>b__272_0(Object obj)\r\n   at System.Threading.ExecutionContext.RunInternal(ExecutionContext executionContext, ContextCallback callback, Object state)\r\n--- End of stack trace from previous location ---\r\n   at System.Threading.ExecutionContext.RunInternal(ExecutionContext executionContext, ContextCallback callback, Object state)\r\n   at System.Threading.Tasks.Task.ExecuteWithThreadLocal(Task& currentTaskSlot, Thread threadPoolThread)\r\n--- End of stack trace from previous location ---\r\n   at Microsoft.EntityFrameworkCore.Storage.RelationalCommand.ExecuteReaderAsync(RelationalCommandParameterObject parameterObject, CancellationToken cancellationToken)\r\n   at Microsoft.EntityFrameworkCore.Storage.RelationalCommand.ExecuteReaderAsync(RelationalCommandParameterObject parameterObject, CancellationToken cancellationToken)\r\n   at Microsoft.EntityFrameworkCore.Update.ReaderModificationCommandBatch.ExecuteAsync(IRelationalConnection connection, CancellationToken cancellationToken)\r\nClientConnectionId:1cb54f7b-6002-429f-b964-287d1a344e2d\r\nError Number:544,State:1,Class:16\r\n   --- End of inner exception stack trace ---\r\n   at Microsoft.EntityFrameworkCore.Update.ReaderModificationCommandBatch.ExecuteAsync(IRelationalConnection connection, CancellationToken cancellationToken)\r\n   at Microsoft.EntityFrameworkCore.Update.Internal.BatchExecutor.ExecuteAsync(IEnumerable`1 commandBatches, IRelationalConnection connection, CancellationToken cancellationToken)\r\n   at Microsoft.EntityFrameworkCore.Update.Internal.BatchExecutor.ExecuteAsync(IEnumerable`1 commandBatches, IRelationalConnection connection, CancellationToken cancellationToken)\r\n   at Microsoft.EntityFrameworkCore.Update.Internal.BatchExecutor.ExecuteAsync(IEnumerable`1 commandBatches, IRelationalConnection connection, CancellationToken cancellationToken)\r\n   at Microsoft.EntityFrameworkCore.ChangeTracking.Internal.StateManager.SaveChangesAsync(IList`1 entriesToSave, CancellationToken cancellationToken)\r\n   at Microsoft.EntityFrameworkCore.ChangeTracking.Internal.StateManager.SaveChangesAsync(StateManager stateManager, Boolean acceptAllChangesOnSuccess, CancellationToken cancellationToken)\r\n   at Microsoft.EntityFrameworkCore.SqlServer.Storage.Internal.SqlServerExecutionStrategy.ExecuteAsync[TState,TResult](TState state, Func`4 operation, Func`4 verifySucceeded, CancellationToken cancellationToken)\r\n   at Microsoft.EntityFrameworkCore.DbContext.SaveChangesAsync(Boolean acceptAllChangesOnSuccess, CancellationToken cancellationToken)\r\n   at Microsoft.EntityFrameworkCore.DbContext.SaveChangesAsync(Boolean acceptAllChangesOnSuccess, CancellationToken cancellationToken)\r\n   at Iot.Data.IotDbContextSeed.SeedSampleDataAsync(IotDbContext context) in D:\\jackyfei\\我录制的视频\\.NET 6.0+Vue 3.0\\github\\jackyfei\\iot-api\\src\\2.infrastructure\\Iot.Data\\IotDbContextSeed.cs:line 38\r\n   at Program.<Main>$(String[] args) in D:\\jackyfei\\我录制的视频\\.NET 6.0+Vue 3.0\\github\\jackyfei\\iot-api\\src\\3.presentation\\Iot.WebApi\\Program.cs:line 149","ExceptionDetail":{"HResult":-2146233088,"Message":"An error occurred while saving the entity changes. See the inner exception for details.","Source":"Microsoft.EntityFrameworkCore.Relational","InnerException":{"Data":{"HelpLink.ProdName":"Microsoft SQL Server","HelpLink.ProdVer":"13.00.1601","HelpLink.EvtSrc":"MSSQLServer","HelpLink.EvtID":"544","HelpLink.BaseHelpUrl":"https://go.microsoft.com/fwlink","HelpLink.LinkId":"20476"},"HResult":-2146232060,"Message":"当 IDENTITY_INSERT 设置为 OFF 时，不能为表 'Products' 中的标识列插入显式值。","Source":"Core Microsoft SqlClient Data Provider","Errors":[{"Source":"Core Microsoft SqlClient Data Provider","Number":544,"State":1,"Class":16,"Server":"DESKTOP-RLSPV8H\\SQL2016","Message":"当 IDENTITY_INSERT 设置为 OFF 时，不能为表 'Products' 中的标识列插入显式值。","Procedure":"","LineNumber":2}],"ClientConnectionId":"1cb54f7b-6002-429f-b964-287d1a344e2d","Class":16,"LineNumber":2,"Number":544,"Procedure":"","Server":"DESKTOP-RLSPV8H\\SQL2016","State":1,"IsTransient":false,"SqlState":null,"BatchCommand":null,"ErrorCode":-2146232060,"Type":"Microsoft.Data.SqlClient.SqlException"},"Entries":[{"Entity":{"Id":1,"Code":"ele","Name":"电梯","Secret":"123qweasd","Category":null,"NodeType":"DirectDevice","DataFormat":null,"ProtocolType":"ModbusRTU","NetType":"MQTT","DeviceCount":1,"Devices":[{"Id":1,"Code":"ele1","Name":"电梯设备1","Secret":null,"ProductId":1,"GroupId":0}],"$id":"20"},"State":"Added","Context":{"Products":"threw System.ObjectDisposedException: Cannot access a disposed context instance. A common cause of this error is disposing a context instance that was resolved from dependency injection and then later trying to use the same context instance elsewhere in your application. This may occur if you are calling 'Dispose' on the context instance, or wrapping it in a using statement. If you are using dependency injection, you should let the dependency injection container take care of disposing context instances.\r\nObject name: 'IotDbContext'.","Devices":"threw System.ObjectDisposedException: Cannot access a disposed context instance. A common cause of this error is disposing a context instance that was resolved from dependency injection and then later trying to use the same context instance elsewhere in your application. This may occur if you are calling 'Dispose' on the context instance, or wrapping it in a using statement. If you are using dependency injection, you should let the dependency injection container take care of disposing context instances.\r\nObject name: 'IotDbContext'.","Database":"threw System.ObjectDisposedException: Cannot access a disposed context instance. A common cause of this error is disposing a context instance that was resolved from dependency injection and then later trying to use the same context instance elsewhere in your application. This may occur if you are calling 'Dispose' on the context instance, or wrapping it in a using statement. If you are using dependency injection, you should let the dependency injection container take care of disposing context instances.\r\nObject name: 'IotDbContext'.","ChangeTracker":"threw System.ObjectDisposedException: Cannot access a disposed context instance. A common cause of this error is disposing a context instance that was resolved from dependency injection and then later trying to use the same context instance elsewhere in your application. This may occur if you are calling 'Dispose' on the context instance, or wrapping it in a using statement. If you are using dependency injection, you should let the dependency injection container take care of disposing context instances.\r\nObject name: 'IotDbContext'.","Model":"threw System.ObjectDisposedException: Cannot access a disposed context instance. A common cause of this error is disposing a context instance that was resolved from dependency injection and then later trying to use the same context instance elsewhere in your application. This may occur if you are calling 'Dispose' on the context instance, or wrapping it in a using statement. If you are using dependency injection, you should let the dependency injection container take care of disposing context instances.\r\nObject name: 'IotDbContext'.","ContextId":{"InstanceId":"ca1207a1-eb09-4d36-a9fe-ac717d64963b","Lease":0,"$type":"DbContextId"},"$id":"21"},"Metadata":{"Name":"Iot.Domain.Entities.Product","Model":{"DebugView":{"LongView":"Model: \r\n  EntityType: Device\r\n    Properties: \r\n      Id (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: IdentityColumn\r\n      Code (string)\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      GroupId (int) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      Name (string)\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      ProductId (int) Required FK Index\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      Secret (string)\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Keys: \r\n      Id PK\r\n    Foreign keys: \r\n      Device {'ProductId'} -> Product {'Id'} ToDependent: Devices Cascade\r\n    Indexes: \r\n      ProductId \r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: Devices\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\n  EntityType: Product\r\n    Properties: \r\n      Id (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: IdentityColumn\r\n      Category (string)\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      Code (string)\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      DataFormat (string)\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      DeviceCount (int) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      Name (string)\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      NetType (NetType) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      NodeType (NodeType) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      ProtocolType (ProtocolType) Required\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n      Secret (string)\r\n        Annotations: \r\n          SqlServer:ValueGenerationStrategy: None\r\n    Navigations: \r\n      Devices (IList<Device>) Collection ToDependent Device\r\n    Keys: \r\n      Id PK\r\n    Annotations: \r\n      DiscriminatorProperty: \r\n      Relational:FunctionName: \r\n      Relational:Schema: \r\n      Relational:SqlQuery: \r\n      Relational:TableName: Products\r\n      Relational:ViewName: \r\n      Relational:ViewSchema: \r\nAnnotations: \r\n  ProductVersion: 6.0.9\r\n  Relational:MaxIdentifierLength: 128\r\n  SqlServer:ValueGenerationStrategy: IdentityColumn","ShortView":"Model: \r\n  EntityType: Device\r\n    Properties: \r\n      Id (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n      Code (string)\r\n      GroupId (int) Required\r\n      Name (string)\r\n      ProductId (int) Required FK Index\r\n      Secret (string)\r\n    Keys: \r\n      Id PK\r\n    Foreign keys: \r\n      Device {'ProductId'} -> Product {'Id'} ToDependent: Devices Cascade\r\n    Indexes: \r\n      ProductId \r\n  EntityType: Product\r\n    Properties: \r\n      Id (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n      Category (string)\r\n      Code (string)\r\n      DataFormat (string)\r\n      DeviceCount (int) Required\r\n      Name (string)\r\n      NetType (NetType) Required\r\n      NodeType (NodeType) Required\r\n      ProtocolType (ProtocolType) Required\r\n      Secret (string)\r\n    Navigations: \r\n      Devices (IList<Device>) Collection ToDependent Device\r\n    Keys: \r\n      Id PK"},"IsReadOnly":false,"$id":"4"},"ConstructorBinding":{"Constructor":"Void .ctor()","RuntimeType":"Iot.Domain.Entities.Product","ParameterBindings":[]},"ServiceOnlyConstructorBinding":{"Constructor":"Void .ctor()","RuntimeType":"Iot.Domain.Entities.Product","ParameterBindings":[]},"DebugView":{"LongView":"EntityType: Product\r\n  Properties: \r\n    Id (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n      Annotations: \r\n        SqlServer:ValueGenerationStrategy: IdentityColumn\r\n    Category (string)\r\n      Annotations: \r\n        SqlServer:ValueGenerationStrategy: None\r\n    Code (string)\r\n      Annotations: \r\n        SqlServer:ValueGenerationStrategy: None\r\n    DataFormat (string)\r\n      Annotations: \r\n        SqlServer:ValueGenerationStrategy: None\r\n    DeviceCount (int) Required\r\n      Annotations: \r\n        SqlServer:ValueGenerationStrategy: None\r\n    Name (string)\r\n      Annotations: \r\n        SqlServer:ValueGenerationStrategy: None\r\n    NetType (NetType) Required\r\n      Annotations: \r\n        SqlServer:ValueGenerationStrategy: None\r\n    NodeType (NodeType) Required\r\n      Annotations: \r\n        SqlServer:ValueGenerationStrategy: None\r\n    ProtocolType (ProtocolType) Required\r\n      Annotations: \r\n        SqlServer:ValueGenerationStrategy: None\r\n    Secret (string)\r\n      Annotations: \r\n        SqlServer:ValueGenerationStrategy: None\r\n  Navigations: \r\n    Devices (IList<Device>) Collection ToDependent Device\r\n  Keys: \r\n    Id PK\r\n  Annotations: \r\n    DiscriminatorProperty: \r\n    Relational:FunctionName: \r\n    Relational:Schema: \r\n    Relational:SqlQuery: \r\n    Relational:TableName: Products\r\n    Relational:ViewName: \r\n    Relational:ViewSchema: ","ShortView":"EntityType: Product\r\n  Properties: \r\n    Id (int) Required PK AfterSave:Throw ValueGenerated.OnAdd\r\n    Category (string)\r\n    Code (string)\r\n    DataFormat (string)\r\n    DeviceCount (int) Required\r\n    Name (string)\r\n    NetType (NetType) Required\r\n    NodeType (NodeType) Required\r\n    ProtocolType (ProtocolType) Required\r\n    Secret (string)\r\n  Navigations: \r\n    Devices (IList<Device>) Collection ToDependent Device\r\n  Keys: \r\n    Id PK"},"IsReadOnly":false,"$id":"1"},"Members":"threw System.ObjectDisposedException: Cannot access a disposed context instance. A common cause of this error is disposing a context instance that was resolved from dependency injection and then later trying to use the same context instance elsewhere in your application. This may occur if you are calling 'Dispose' on the context instance, or wrapping it in a using statement. If you are using dependency injection, you should let the dependency injection container take care of disposing context instances.\r\nObject name: 'IotDbContext'.","Navigations":"threw System.ObjectDisposedException: Cannot access a disposed context instance. A common cause of this error is disposing a context instance that was resolved from dependency injection and then later trying to use the same context instance elsewhere in your application. This may occur if you are calling 'Dispose' on the context instance, or wrapping it in a using statement. If you are using dependency injection, you should let the dependency injection container take care of disposing context instances.\r\nObject name: 'IotDbContext'.","Properties":[{"IsModified":false,"IsTemporary":false,"Metadata":{"$ref":"2"},"OriginalValue":1,"MemberEntry.Metadata":{"$ref":"2"},"CurrentValue":1,"EntityEntry":{"Entity":{"$ref":"20"},"State":"Added","Context":{"$ref":"21"},"Metadata":{"$ref":"1"},"Members":"threw System.ObjectDisposedException: Cannot access a disposed context instance. A common cause of this error is disposing a context instance that was resolved from dependency injection and then later trying to use the same context instance elsewhere in your application. This may occur if you are calling 'Dispose' on the context instance, or wrapping it in a using statement. If you are using dependency injection, you should let the dependency injection container take care of disposing context instances.\r\nObject name: 'IotDbContext'.","Navigations":"threw System.ObjectDisposedException: Cannot access a disposed context instance. A common cause of this error is disposing a context instance that was resolved from dependency injection and then later trying to use the same context instance elsewhere in your application. This may occur if you are calling 'Dispose' on the context instance, or wrapping it in a using statement. If you are using dependency injection, you should let the dependency injection container take care of disposing context instances.\r\nObject name: 'IotDbContext'.","Properties":[{"IsModified":false,"IsTemporary":false,"Metadata":{"$ref":"2"},"OriginalValue":1,"MemberEntry.Metadata":{"$ref":"2"},"CurrentValue":1,"EntityEntry":{"Entity":{},"State":"Added","Context":{},"Metadata":{},"Members":"threw System.ObjectDisposedException: Cannot access a disposed context instance. A common cause of this error is disposing a context instance that was resolved from dependency injection and then later trying to use the same context instance elsewhere in your application. This may occur if you are calling 'Dispose' on the context instance, or wrapping it in a using statement. If you are using dependency injection, you should let the dependency injection container take care of disposing context instances.\r\nObject name: 'IotDbContext'.","Navigations":"threw System.ObjectDisposedException: Cannot access a disposed context instance. A common cause of this error is disposing a context instance that was resolved from dependency injection and then later trying to use the same context instance elsewhere in your application. This may occur if you are calling 'Dispose' on the context instance, or wrapping it in a using statement. If you are using dependency injection, you should let the dependency injection container take care of disposing context instances.\r\nObject name: 'IotDbContext'.","Properties":[null,null,null,null,null,null,null,null,null,null],"References":[],"Collections":"threw System.ObjectDisposedException: Cannot access a disposed context instance. A common cause of this error is disposing a context instance that was resolved from dependency injection and then later trying to use the same context instance elsewhere in your application. This may occur if you are calling 'Dispose' on the context instance, or wrapping it in a using statement. If you are using dependency injection, you should let the dependency injection container take care of disposing context instances.\r\nObject name: 'IotDbContext'.","IsKeySet":true,"CurrentValues":{},"OriginalValues":{},"DebugView":{}}},{"IsModified":false,"IsTemporary":false,"Metadata":{"$ref":"23"},"OriginalValue":null,"MemberEntry.Metadata":{"$ref":"23"},"CurrentValue":null,"EntityEntry":{"Entity":{},"State":"Added","Context":{},"Metadata":{},"Members":"threw System.ObjectDisposedException: Cannot access a disposed context instance. A common cause of this error is disposing a context instance that was resolved from dependency injection and then later trying to use the same context instance elsewhere in your application. This may occur if you are calling 'Dispose' on the context instance, or wrapping it in a using statement. If you are using dependency injection, you should let the dependency injection container take care of disposing context instances.\r\nObject name: 'IotDbContext'.","Navigations":"threw System.ObjectDisposedException: Cannot access a disposed context instance. A common cause of this error is disposing a context instance that was resolved from dependency injection and then later trying to use the same context instance elsewhere in your application. This may occur if you are calling 'Dispose' on the context instance, or wrapping it in a using statement. If you are using dependency injection, you should let the dependency injection container take care of disposing context instances.\r\nObject name: 'IotDbContext'.","Properties":[null,null,null,null,null,null,null,null,null,null],"References":[],"Collections":"threw System.ObjectDisposedException: Cannot access a disposed context instance. A common cause of this error is disposing a context instance that was resolved from dependency injection and then later trying to use the same context instance elsewhere in your application. This may occur if you are calling 'Dispose' on the context instance, or wrapping it in a using statement. If you are using dependency injection, you should let the dependency injection container take care of disposing context instances.\r\nObject name: 'IotDbContext'.","IsKeySet":true,"CurrentValues":{},"OriginalValues":{},"DebugView":{}}},{"IsModified":false,"IsTemporary":false,"Metadata":{"$ref":"25"},"OriginalValue":"ele","MemberEntry.Metadata":{"$ref":"25"},"CurrentValue":"ele","EntityEntry":{"Entity":{},"State":"Added","Context":{},"Metadata":{},"Members":"threw System.ObjectDisposedException: Cannot access a disposed context instance. A common cause of this error is disposing a context instance that was resolved from dependency injection and then later trying to use the same context instance elsewhere in your application. This may occur if you are calling 'Dispose' on the context instance, or wrapping it in a using statement. If you are using dependency injection, you should let the dependency injection container take care of disposing context instances.\r\nObject name: 'IotDbContext'.","Navigations":"threw System.ObjectDisposedException: Cannot access a disposed context instance. A common cause of this error is disposing a context instance that was resolved from dependency injection and then later trying to use the same context instance elsewhere in your application. This may occur if you are calling 'Dispose' on the context instance, or wrapping it in a using statement. If you are using dependency injection, you should let the dependency injection container take care of disposing context instances.\r\nObject name: 'IotDbContext'.","Properties":[null,null,null,null,null,null,null,null,null,null],"References":[],"Collections":"threw System.ObjectDisposedException: Cannot access a disposed context instance. A common cause of this error is disposing a context instance that was resolved from dependency injection and then later trying to use the same context instance elsewhere in your application. This may occur if you are calling 'Dispose' on the context instance, or wrapping it in a using statement. If you are using dependency injection, you should let the dependency injection container take care of disposing context instances.\r\nObject name: 'IotDbContext'.","IsKeySet":true,"CurrentValues":{},"OriginalValues":{},"DebugView":{}}},{"IsModified":false,"IsTemporary":false,"Metadata":{"$ref":"26"},"OriginalValue":null,"MemberEntry.Metadata":{"$ref":"26"},"CurrentValue":null,"EntityEntry":{"Entity":{},"State":"Added","Context":{},"Metadata":{},"Members":"threw System.ObjectDisposedException: Cannot access a disposed context instance. A common cause of this error is disposing a context instance that was resolved from dependency injection and then later trying to use the same context instance elsewhere in your application. This may occur if you are calling 'Dispose' on the context instance, or wrapping it in a using statement. If you are using dependency injection, you should let the dependency injection container take care of disposing context instances.\r\nObject name: 'IotDbContext'.","Navigations":"threw System.ObjectDisposedException: Cannot access a disposed context instance. A common cause of this error is disposing a context instance that was resolved from dependency injection and then later trying to use the same context instance elsewhere in your application. This may occur if you are calling 'Dispose' on the context instance, or wrapping it in a using statement. If you are using dependency injection, you should let the dependency injection container take care of disposing context instances.\r\nObject name: 'IotDbContext'.","Properties":[null,null,null,null,null,null,null,null,null,null],"References":[],"Collections":"threw System.ObjectDisposedException: Cannot access a disposed context instance. A common cause of this error is disposing a context instance that was resolved from dependency injection and then later trying to use the same context instance elsewhere in your application. This may occur if you are calling 'Dispose' on the context instance, or wrapping it in a using statement. If you are using dependency injection, you should let the dependency injection container take care of disposing context instances.\r\nObject name: 'IotDbContext'.","IsKeySet":true,"CurrentValues":{},"OriginalValues":{},"DebugView":{}}},{"IsModified":false,"IsTemporary":false,"Metadata":{"$ref":"28"},"OriginalValue":1,"MemberEntry.Metadata":{"$ref":"28"},"CurrentValue":1,"EntityEntry":{"Entity":{},"State":"Added","Context":{},"Metadata":{},"Members":"threw System.ObjectDisposedException: Cannot access a disposed context instance. A common cause of this error is disposing a context instance that was resolved from dependency injection and then later trying to use the same context instance elsewhere in your application. This may occur if you are calling 'Dispose' on the context instance, or wrapping it in a using statement. If you are using dependency injection, you should let the dependency injection container take care of disposing context instances.\r\nObject name: 'IotDbContext'.","Navigations":"threw System.ObjectDisposedException: Cannot access a disposed context instance. A common cause of this error is disposing a context instance that was resolved from dependency injection and then later trying to use the same context instance elsewhere in your application. This may occur if you are calling 'Dispose' on the context instance, or wrapping it in a using statement. If you are using dependency injection, you should let the dependency injection container take care of disposing context instances.\r\nObject name: 'IotDbContext'.","Properties":[null,null,null,null,null,null,null,null,null,null],"References":[],"Collections":"threw System.ObjectDisposedException: Cannot access a disposed context instance. A common cause of this error is disposing a context instance that was resolved from dependency injection and then later trying to use the same context instance elsewhere in your application. This may occur if you are calling 'Dispose' on the context instance, or wrapping it in a using statement. If you are using dependency injection, you should let the dependency injection container take care of disposing context instances.\r\nObject name: 'IotDbContext'.","IsKeySet":true,"CurrentValues":{},"OriginalValues":{},"DebugView":{}}},{"IsModified":false,"IsTemporary":false,"Metadata":{"$ref":"29"},"OriginalValue":"电梯","MemberEntry.Metadata":{"$ref":"29"},"CurrentValue":"电梯","EntityEntry":{"Entity":{},"State":"Added","Context":{},"Metadata":{},"Members":"threw System.ObjectDisposedException: Cannot access a disposed context instance. A common cause of this error is disposing a context instance that was resolved from dependency injection and then later trying to use the same context instance elsewhere in your application. This may occur if you are calling 'Dispose' on the context instance, or wrapping it in a using statement. If you are using dependency injection, you should let the dependency injection container take care of disposing context instances.\r\nObject name: 'IotDbContext'.","Navigations":"threw System.ObjectDisposedException: Cannot access a disposed context instance. A common cause of this error is disposing a context instance that was resolved from dependency injection and then later trying to use the same context instance elsewhere in your application. This may occur if you are calling 'Dispose' on the context instance, or wrapping it in a using statement. If you are using dependency injection, you should let the dependency injection container take care of disposing context instances.\r\nObject name: 'IotDbContext'.","Properties":[null,null,null,null,null,null,null,null,null,null],"References":[],"Collections":"threw System.ObjectDisposedException: Cannot access a disposed context instance. A common cause of this error is disposing a context instance that was resolved from dependency injection and then later trying to use the same context instance elsewhere in your application. This may occur if you are calling 'Dispose' on the context instance, or wrapping it in a using statement. If you are using dependency injection, you should let the dependency injection container take care of disposing context instances.\r\nObject name: 'IotDbContext'.","IsKeySet":true,"CurrentValues":{},"OriginalValues":{},"DebugView":{}}},{"IsModified":false,"IsTemporary":false,"Metadata":{"$ref":"31"},"OriginalValue":"MQTT","MemberEntry.Metadata":{"$ref":"31"},"CurrentValue":"MQTT","EntityEntry":{"Entity":{},"State":"Added","Context":{},"Metadata":{},"Members":"threw System.ObjectDisposedException: Cannot access a disposed context instance. A common cause of this error is disposing a context instance that was resolved from dependency injection and then later trying to use the same context instance elsewhere in your application. This may occur if you are calling 'Dispose' on the context instance, or wrapping it in a using statement. If you are using dependency injection, you should let the dependency injection container take care of disposing context instances.\r\nObject name: 'IotDbContext'.","Navigations":"threw System.ObjectDisposedException: Cannot access a disposed context instance. A common cause of this error is disposing a context instance that was resolved from dependency injection and then later trying to use the same context instance elsewhere in your application. This may occur if you are calling 'Dispose' on the context instance, or wrapping it in a using statement. If you are using dependency injection, you should let the dependency injection container take care of disposing context instances.\r\nObject name: 'IotDbContext'.","Properties":[null,null,null,null,null,null,null,null,null,null],"References":[],"Collections":"threw System.ObjectDisposedException: Cannot access a disposed context instance. A common cause of this error is disposing a context instance that was resolved from dependency injection and then later trying to use the same context instance elsewhere in your application. This may occur if you are calling 'Dispose' on the context instance, or wrapping it in a using statement. If you are using dependency injection, you should let the dependency injection container take care of disposing context instances.\r\nObject name: 'IotDbContext'.","IsKeySet":true,"CurrentValues":{},"OriginalValues":{},"DebugView":{}}},{"IsModified":false,"IsTemporary":false,"Metadata":{"$ref":"33"},"OriginalValue":"DirectDevice","MemberEntry.Metadata":{"$ref":"33"},"CurrentValue":"DirectDevice","EntityEntry":{"Entity":{},"State":"Added","Context":{},"Metadata":{},"Members":"threw System.ObjectDisposedException: Cannot access a disposed context instance. A common cause of this error is disposing a context instance that was resolved from dependency injection and then later trying to use the same context instance elsewhere in your application. This may occur if you are calling 'Dispose' on the context instance, or wrapping it in a using statement. If you are using dependency injection, you should let the dependency injection container take care of disposing context instances.\r\nObject name: 'IotDbContext'.","Navigations":"threw System.ObjectDisposedException: Cannot access a disposed context instance. A common cause of this error is disposing a context instance that was resolved from dependency injection and then later trying to use the same context instance elsewhere in your application. This may occur if you are calling 'Dispose' on the context instance, or wrapping it in a using statement. If you are using dependency injection, you should let the dependency injection container take care of disposing context instances.\r\nObject name: 'IotDbContext'.","Properties":[null,null,null,null,null,null,null,null,null,null],"References":[],"Collections":"threw System.ObjectDisposedException: Cannot access a disposed context instance. A common cause of this error is disposing a context instance that was resolved from dependency injection and then later trying to use the same context instance elsewhere in your application. This may occur if you are calling 'Dispose' on the context instance, or wrapping it in a using statement. If you are using dependency injection, you should let the dependency injection container take care of disposing context instances.\r\nObject name: 'IotDbContext'.","IsKeySet":true,"CurrentValues":{},"OriginalValues":{},"DebugView":{}}},{"IsModified":false,"IsTemporary":false,"Metadata":{"$ref":"35"},"OriginalValue":"ModbusRTU","MemberEntry.Metadata":{"$ref":"35"},"CurrentValue":"ModbusRTU","EntityEntry":{"Entity":{},"State":"Added","Context":{},"Metadata":{},"Members":"threw System.ObjectDisposedException: Cannot access a disposed context instance. A common cause of this error is disposing a context instance that was resolved from dependency injection and then later trying to use the same context instance elsewhere in your application. This may occur if you are calling 'Dispose' on the context instance, or wrapping it in a using statement. If you are using dependency injection, you should let the dependency injection container take care of disposing context instances.\r\nObject name: 'IotDbContext'.","Navigations":"threw System.ObjectDisposedException: Cannot access a disposed context instance. A common cause of this error is disposing a context instance that was resolved from dependency injection and then later trying to use the same context instance elsewhere in your application. This may occur if you are calling 'Dispose' on the context instance, or wrapping it in a using statement. If you are using dependency injection, you should let the dependency injection container take care of disposing context instances.\r\nObject name: 'IotDbContext'.","Properties":[null,null,null,null,null,null,null,null,null,null],"References":[],"Collections":"threw System.ObjectDisposedException: Cannot access a disposed context instance. A common cause of this error is disposing a context instance that was resolved from dependency injection and then later trying to use the same context instance elsewhere in your application. This may occur if you are calling 'Dispose' on the context instance, or wrapping it in a using statement. If you are using dependency injection, you should let the dependency injection container take care of disposing context instances.\r\nObject name: 'IotDbContext'.","IsKeySet":true,"CurrentValues":{},"OriginalValues":{},"DebugView":{}}},{"IsModified":false,"IsTemporary":false,"Metadata":{"$ref":"36"},"OriginalValue":"123qweasd","MemberEntry.Metadata":{"$ref":"36"},"CurrentValue":"123qweasd","EntityEntry":{"Entity":{},"State":"Added","Context":{},"Metadata":{},"Members":"threw System.ObjectDisposedException: Cannot access a disposed context instance. A common cause of this error is disposing a context instance that was resolved from dependency injection and then later trying to use the same context instance elsewhere in your application. This may occur if you are calling 'Dispose' on the context instance, or wrapping it in a using statement. If you are using dependency injection, you should let the dependency injection container take care of disposing context instances.\r\nObject name: 'IotDbContext'.","Navigations":"threw System.ObjectDisposedException: Cannot access a disposed context instance. A common cause of this error is disposing a context instance that was resolved from dependency injection and then later trying to use the same context instance elsewhere in your application. This may occur if you are calling 'Dispose' on the context instance, or wrapping it in a using statement. If you are using dependency injection, you should let the dependency injection container take care of disposing context instances.\r\nObject name: 'IotDbContext'.","Properties":[null,null,null,null,null,null,null,null,null,null],"References":[],"Collections":"threw System.ObjectDisposedException: Cannot access a disposed context instance. A common cause of this error is disposing a context instance that was resolved from dependency injection and then later trying to use the same context instance elsewhere in your application. This may occur if you are calling 'Dispose' on the context instance, or wrapping it in a using statement. If you are using dependency injection, you should let the dependency injection container take care of disposing context instances.\r\nObject name: 'IotDbContext'.","IsKeySet":true,"CurrentValues":{},"OriginalValues":{},"DebugView":{}}}],"References":[],"Collections":"threw System.ObjectDisposedException: Cannot access a disposed context instance. A common cause of this error is disposing a context instance that was resolved from dependency injection and then later trying to use the same context instance elsewhere in your application. This may occur if you are calling 'Dispose' on the context instance, or wrapping it in a using statement. If you are using dependency injection, you should let the dependency injection container take care of disposing context instances.\r\nObject name: 'IotDbContext'.","IsKeySet":true,"CurrentValues":{"Properties":[{"$ref":"2"},{"$ref":"23"},{"$ref":"25"},{"$ref":"26"},{"$ref":"28"},{"$ref":"29"},{"$ref":"31"},{"$ref":"33"},{"$ref":"35"},{"$ref":"36"}],"EntityType":{"$ref":"1"}},"OriginalValues":{"Properties":[{"$ref":"2"},{"$ref":"23"},{"$ref":"25"},{"$ref":"26"},{"$ref":"28"},{"$ref":"29"},{"$ref":"31"},{"$ref":"33"},{"$ref":"35"},{"$ref":"36"}],"EntityType":{"$ref":"1"}},"DebugView":{"LongView":"Product {Id: 1} Added\r\n  Id: 1 PK\r\n  Category: <null>\r\n  Code: 'ele'\r\n  DataFormat: <null>\r\n  DeviceCount: 1\r\n  Name: '电梯'\r\n  NetType: 'MQTT'\r\n  NodeType: 'DirectDevice'\r\n  ProtocolType: 'ModbusRTU'\r\n  Secret: '123qweasd'\r\n  Devices: [{Id: 1}]","ShortView":"Product {Id: 1} Added"}}},{"IsModified":false,"IsTemporary":false,"Metadata":{"$ref":"23"},"OriginalValue":null,"MemberEntry.Metadata":{"$ref":"23"},"CurrentValue":null,"EntityEntry":{"Entity":{"$ref":"20"},"State":"Added","Context":{"$ref":"21"},"Metadata":{"$ref":"1"},"Members":"threw System.ObjectDisposedException: Cannot access a disposed context instance. A common cause of this error is disposing a context instance that was resolved from dependency injection and then later trying to use the same context instance elsewhere in your application. This may occur if you are calling 'Dispose' on the context instance, or wrapping it in a using statement. If you are using dependency injection, you should let the dependency injection container take care of disposing context instances.\r\nObject name: 'IotDbContext'.","Navigations":"threw System.ObjectDisposedException: Cannot access a disposed context instance. A common cause of this error is disposing a context instance that was resolved from dependency injection and then later trying to use the same context instance elsewhere in your application. This may occur if you are calling 'Dispose' on the context instance, or wrapping it in a using statement. If you are using dependency injection, you should let the dependency injection container take care of disposing context instances.\r\nObject name: 'IotDbContext'.","Properties":[{"IsModified":false,"IsTemporary":false,"Metadata":{"$ref":"2"},"OriginalValue":1,"MemberEntry.Metadata":{"$ref":"2"},"CurrentValue":1,"EntityEntry":{"Entity":{},"State":"Added","Context":{},"Metadata":{},"Members":"threw System.ObjectDisposedException: Cannot access a disposed context instance. A common cause of this error is disposing a context instance that was resolved from dependency injection and then later trying to use the same context instance elsewhere in your application. This may occur if you are calling 'Dispose' on the context instance, or wrapping it in a using statement. If you are using dependency injection, you should let the dependency injection container take care of disposing context instances.\r\nObject name: 'IotDbContext'.","Navigations":"threw System.ObjectDisposedException: Cannot access a disposed context instance. A common cause of this error is disposing a context instance that was resolved from dependency injection and then later trying to use the same context instance elsewhere in your application. This may occur if you are calling 'Dispose' on the context instance, or wrapping it in a using statement. If you are using dependency injection, you should let the dependency injection container take care of disposing context instances.\r\nObject name: 'IotDbContext'.","Properties":[null,null,null,null,null,null,null,null,null,null],"References":[],"Collections":"threw System.ObjectDisposedException: Cannot access a disposed context instance. A common cause of this error is disposing a context instance that was resolved from dependency injection and then later trying to use the same context instance elsewhere in your application. This may occur if you are calling 'Dispose' on the context instance, or wrapping it in a using statement. If you are using dependency injection, you should let the dependency injection container take care of disposing context instances.\r\nObject name: 'IotDbContext'.","IsKeySet":true,"CurrentValues":{},"OriginalValues":{},"DebugView":{}}},{"IsModified":false,"IsTemporary":false,"Metadata":{"$ref":"23"},"OriginalValue":null,"MemberEntry.Metadata":{"$ref":"23"},"CurrentValue":null,"EntityEntry":{"Entity":{},"State":"Added","Context":{},"Metadata":{},"Members":"threw System.ObjectDisposedException: Cannot access a disposed context instance. A common cause of this error is disposing a context instance that was resolved from dependency injection and then later trying to use the same context instance elsewhere in your application. This may occur if you are calling 'Dispose' on the context instance, or wrapping it in a using statement. If you are using dependency injection, you should let the dependency injection container take care of disposing context instances.\r\nObject name: 'IotDbContext'.","Navigations":"threw System.ObjectDisposedException: Cannot access a disposed context instance. A common cause of this error is disposing a context instance that was resolved from dependency injection and then later trying to use the same context instance elsewhere in your application. This may occur if you are calling 'Dispose' on the context instance, or wrapping it in a using statement. If you are using dependency injection, you should let the dependency injection container take care of disposing context instances.\r\nObject name: 'IotDbContext'.","Properties":[null,null,null,null,null,null,null,null,null,null],"References":[],"Collections":"threw System.ObjectDisposedException: Cannot access a disposed context instance. A common cause of this error is disposing a context instance that was resolved from dependency injection and then later trying to use the same context instance elsewhere in your application. This may occur if you are calling 'Dispose' on the context instance, or wrapping it in a using statement. If you are using dependency injection, you should let the dependency injection container take care of disposing context instances.\r\nObject name: 'IotDbContext'.","IsKeySet":true,"CurrentValues":{},"OriginalValues":{},"DebugView":{}}},{"IsModified":false,"IsTemporary":false,"Metadata":{"$ref":"25"},"OriginalValue":"ele","MemberEntry.Metadata":{"$ref":"25"},"CurrentValue":"ele","EntityEntry":{"Entity":{},"State":"Added","Context":{},"Metadata":{},"Members":"threw System.ObjectDisposedException: Cannot access a disposed context instance. A common cause of this error is disposing a context instance that was resolved from dependency injection and then later trying to use the same context instance elsewhere in your application. This may occur if you are calling 'Dispose' on the context instance, or wrapping it in a using statement. If you are using dependency injection, you should let the dependency injection container take care of disposing context instances.\r\nObject name: 'IotDbContext'.","Navigations":"threw System.ObjectDisposedException: Cannot access a disposed context instance. A common cause of this error is disposing a context instance that was resolved from dependency injection and then later trying to use the same context instance elsewhere in your application. This may occur if you are calling 'Dispose' on the context instance, or wrapping it in a using statement. If you are using dependency injection, you should let the dependency injection container take care of disposing context instances.\r\nObject name: 'IotDbContext'.","Properties":[null,null,null,null,null,null,null,null,null,null],"References":[],"Collections":"threw System.ObjectDisposedException: Cannot access a disposed context instance. A common cause of this error is disposing a context instance that was resolved from dependency injection and then later trying to use the same context instance elsewhere in your application. This may occur if you are calling 'Dispose' on the context instance, or wrapping it in a using statement. If you are using dependency injection, you should let the dependency injection container take care of disposing context instances.\r\nObject name: 'IotDbContext'.","IsKeySet":true,"CurrentValues":{},"OriginalValues":{},"DebugView":{}}},{"IsModified":false,"IsTemporary":false,"Metadata":{"$ref":"26"},"OriginalValue":null,"MemberEntry.Metadata":{"$ref":"26"},"CurrentValue":null,"EntityEntry":{"Entity":{},"State":"Added","Context":{},"Metadata":{},"Members":"threw System.ObjectDisposedException: Cannot access a disposed context instance. A common cause of this error is disposing a context instance that was resolved from dependency injection and then later trying to use the same context instance elsewhere in your application. This may occur if you are calling 'Dispose' on the context instance, or wrapping it in a using statement. If you are using dependency injection, you should let the dependency injection container take care of disposing context instances.\r\nObject name: 'IotDbContext'.","Navigations":"threw System.ObjectDisposedException: Cannot access a disposed context instance. A common cause of this error is disposing a context instance that was resolved from dependency injection and then later trying to use the same context instance elsewhere in your application. This may occur if you are calling 'Dispose' on the context instance, or wrapping it in a using statement. If you are using dependency injection, you should let the dependency injection container take care of disposing context instances.\r\nObject name: 'IotDbContext'.","Properties":[null,null,null,null,null,null,null,null,null,null],"References":[],"Collections":"threw System.ObjectDisposedException: Cannot access a disposed context instance. A common cause of this error is disposing a context instance that was resolved from dependency injection and then later trying to use the same context instance elsewhere in your application. This may occur if you are calling 'Dispose' on the context instance, or wrapping it in a using statement. If you are using dependency injection, you should let the dependency injection container take care of disposing context instances.\r\nObject name: 'IotDbContext'.","IsKeySet":true,"CurrentValues":{},"OriginalValues":{},"DebugView":{}}},{"IsModified":false,"IsTemporary":false,"Metadata":{"$ref":"28"},"OriginalValue":1,"MemberEntry.Metadata":{"$ref":"28"},"CurrentValue":1,"EntityEntry":{"Entity":{},"State":"Added","Context":{},"Metadata":{},"Members":"threw System.ObjectDisposedException: Cannot access a disposed context instance. A common cause of this error is disposing a context instance that was resolved from dependency injection and then later trying to use the same context instance elsewhere in your application. This may occur if you are calling 'Dispose' on the context instance, or wrapping it in a using statement. If you are using dependency injection, you should let the dependency injection container take care of disposing context instances.\r\nObject name: 'IotDbContext'.","Navigations":"threw System.ObjectDisposedException: Cannot access a disposed context instance. A common cause of this error is disposing a context instance that was resolved from dependency injection and then later trying to use the same context instance elsewhere in your application. This may occur if you are calling 'Dispose' on the context instance, or wrapping it in a using statement. If you are using dependency injection, you should let the dependency injection container take care of disposing context instances.\r\nObject name: 'IotDbContext'.","Properties":[null,null,null,null,null,null,null,null,null,null],"References":[],"Collections":"threw System.ObjectDisposedException: Cannot access a disposed context instance. A common cause of this error is disposing a context instance that was resolved from dependency injection and then later trying to use the same context instance elsewhere in your application. This may occur if you are calling 'Dispose' on the context instance, or wrapping it in a using statement. If you are using dependency injection, you should let the dependency injection container take care of disposing context instances.\r\nObject name: 'IotDbContext'.","IsKeySet":true,"CurrentValues":{},"OriginalValues":{},"DebugView":{}}},{"IsModified":false,"IsTemporary":false,"Metadata":{"$ref":"29"},"OriginalValue":"电梯","MemberEntry.Metadata":{"$ref":"29"},"CurrentValue":"电梯","EntityEntry":{"Entity":{},"State":"Added","Context":{},"Metadata":{},"Members":"threw System.ObjectDisposedException: Cannot access a disposed context instance. A common cause of this error is disposing a context instance that was resolved from dependency injection and then later trying to use the same context instance elsewhere in your application. This may occur if you are calling 'Dispose' on the context instance, or wrapping it in a using statement. If you are using dependency injection, you should let the dependency injection container take care of disposing context instances.\r\nObject name: 'IotDbContext'.","Navigations":"threw System.ObjectDisposedException: Cannot access a disposed context instance. A common cause of this error is disposing a context instance that was resolved from dependency injection and then later trying to use the same context instance elsewhere in your application. This may occur if you are calling 'Dispose' on the context instance, or wrapping it in a using statement. If you are using dependency injection, you should let the dependency injection container take care of disposing context instances.\r\nObject name: 'IotDbContext'.","Properties":[null,null,null,null,null,null,null,null,null,null],"References":[],"Collections":"threw System.ObjectDisposedException: Cannot access a disposed context instance. A common cause of this error is disposing a context instance that was resolved from dependency injection and then later trying to use the same context instance elsewhere in your application. This may occur if you are calling 'Dispose' on the context instance, or wrapping it in a using statement. If you are using dependency injection, you should let the dependency injection container take care of disposing context instances.\r\nObject name: 'IotDbContext'.","IsKeySet":true,"CurrentValues":{},"OriginalValues":{},"DebugView":{}}},{"IsModified":false,"IsTemporary":false,"Metadata":{"$ref":"31"},"OriginalValue":"MQTT","MemberEntry.Metadata":{"$ref":"31"},"CurrentValue":"MQTT","EntityEntry":{"Entity":{},"State":"Added","Context":{},"Metadata":{},"Members":"threw System.ObjectDisposedException: Cannot access a disposed context instance. A common cause of this error is disposing a context instance that was resolved from dependency injection and then later trying to use the same context instance elsewhere in your application. This may occur if you are calling 'Dispose' on the context instance, or wrapping it in a using statement. If you are using dependency injection, you should let the dependency injection container take care of disposing context instances.\r\nObject name: 'IotDbContext'.","Navigations":"threw System.ObjectDisposedException: Cannot access a disposed context instance. A common cause of this error is disposing a context instance that was resolved from dependency injection and then later trying to use the same context instance elsewhere in your application. This may occur if you are calling 'Dispose' on the context instance, or wrapping it in a using statement. If you are using dependency injection, you should let the dependency injection container take care of disposing context instances.\r\nObject name: 'IotDbContext'.","Properties":[null,null,null,null,null,null,null,null,null,null],"References":[],"Collections":"threw System.ObjectDisposedException: Cannot access a disposed context instance. A common cause of this error is disposing a context instance that was resolved from dependency injection and then later trying to use the same context instance elsewhere in your application. This may occur if you are calling 'Dispose' on the context instance, or wrapping it in a using statement. If you are using dependency injection, you should let the dependency injection container take care of disposing context instances.\r\nObject name: 'IotDbContext'.","IsKeySet":true,"CurrentValues":{},"OriginalValues":{},"DebugView":{}}},{"IsModified":false,"IsTemporary":false,"Metadata":{"$ref":"33"},"OriginalValue":"DirectDevice","MemberEntry.Metadata":{"$ref":"33"},"CurrentValue":"DirectDevice","EntityEntry":{"Entity":{},"State":"Added","Context":{},"Metadata":{},"Members":"threw System.ObjectDisposedException: Cannot access a disposed context instance. A common cause of this error is disposing a context instance that was resolved from dependency injection and then later trying to use the same context instance elsewhere in your application. This may occur if you are calling 'Dispose' on the context instance, or wrapping it in a using statement. If you are using dependency injection, you should let the dependency injection container take care of disposing context instances.\r\nObject name: 'IotDbContext'.","Navigations":"threw System.ObjectDisposedException: Cannot access a disposed context instance. A common cause of this error is disposing a context instance that was resolved from dependency injection and then later trying to use the same context instance elsewhere in your application. This may occur if you are calling 'Dispose' on the context instance, or wrapping it in a using statement. If you are using dependency injection, you should let the dependency injection container take care of disposing context instances.\r\nObject name: 'IotDbContext'.","Properties":[null,null,null,null,null,null,null,null,null,null],"References":[],"Collections":"threw System.ObjectDisposedException: Cannot access a disposed context instance. A common cause of this error is disposing a context instance that was resolved from dependency injection and then later trying to use the same context instance elsewhere in your application. This may occur if you are calling 'Dispose' on the context instance, or wrapping it in a using statement. If you are using dependency injection, you should let the dependency injection container take care of disposing context instances.\r\nObject name: 'IotDbContext'.","IsKeySet":true,"CurrentValues":{},"OriginalValues":{},"DebugView":{}}},{"IsModified":false,"IsTemporary":false,"Metadata":{"$ref":"35"},"OriginalValue":"ModbusRTU","MemberEntry.Metadata":{"$ref":"35"},"CurrentValue":"ModbusRTU","EntityEntry":{"Entity":{},"State":"Added","Context":{},"Metadata":{},"Members":"threw System.ObjectDisposedException: Cannot access a disposed context instance. A common cause of this error is disposing a context instance that was resolved from dependency injection and then later trying to use the same context instance elsewhere in your application. This may occur if you are calling 'Dispose' on the context instance, or wrapping it in a using statement. If you are using dependency injection, you should let the dependency injection container take care of disposing context instances.\r\nObject name: 'IotDbContext'.","Navigations":"threw System.ObjectDisposedException: Cannot access a disposed context instance. A common cause of this error is disposing a context instance that was resolved from dependency injection and then later trying to use the same context instance elsewhere in your application. This may occur if you are calling 'Dispose' on the context instance, or wrapping it in a using statement. If you are using dependency injection, you should let the dependency injection container take care of disposing context instances.\r\nObject name: 'IotDbContext'.","Properties":[null,null,null,null,null,null,null,null,null,null],"References":[],"Collections":"threw System.ObjectDisposedException: Cannot access a disposed context instance. A common cause of this error is disposing a context instance that was resolved from dependency injection and then later trying to use the same context instance elsewhere in your application. This may occur if you are calling 'Dispose' on the context instance, or wrapping it in a using statement. If you are using dependency injection, you should let the dependency injection container take care of disposing context instances.\r\nObject name: 'IotDbContext'.","IsKeySet":true,"CurrentValues":{},"OriginalValues":{},"DebugView":{}}},{"IsModified":false,"IsTemporary":false,"Metadata":{"$ref":"36"},"OriginalValue":"123qweasd","MemberEntry.Metadata":{"$ref":"36"},"CurrentValue":"123qweasd","EntityEntry":{"Entity":{},"State":"Added","Context":{},"Metadata":{},"Members":"threw System.ObjectDisposedException: Cannot access a disposed context instance. A common cause of this error is disposing a context instance that was resolved from dependency injection and then later trying to use the same context instance elsewhere in your application. This may occur if you are calling 'Dispose' on the context instance, or wrapping it in a using statement. If you are using dependency injection, you should let the dependency injection container take care of disposing context instances.\r\nObject name: 'IotDbContext'.","Navigations":"threw System.ObjectDisposedException: Cannot access a disposed context instance. A common cause of this error is disposing a context instance that was resolved from dependency injection and then later trying to use the same context instance elsewhere in your application. This may occur if you are calling 'Dispose' on the context instance, or wrapping it in a using statement. If you are using dependency injection, you should let the dependency injection container take care of disposing context instances.\r\nObject name: 'IotDbContext'.","Properties":[null,null,null,null,null,null,null,null,null,null],"References":[],"Collections":"threw System.ObjectDisposedException: Cannot access a disposed context instance. A common cause of this error is disposing a context instance that was resolved from dependency injection and then later trying to use the same context instance elsewhere in your application. This may occur if you are calling 'Dispose' on the context instance, or wrapping it in a using statement. If you are using dependency injection, you should let the dependency injection container take care of disposing context instances.\r\nObject name: 'IotDbContext'.","IsKeySet":true,"CurrentValues":{},"OriginalValues":{},"DebugView":{}}}],"References":[],"Collections":"threw System.ObjectDisposedException: Cannot access a disposed context instance. A common cause of this error is disposing a context instance that was resolved from dependency injection and then later trying to use the same context instance elsewhere in your application. This may occur if you are calling 'Dispose' on the context instance, or wrapping it in a using statement. If you are using dependency injection, you should let the dependency injection container take care of disposing context instances.\r\nObject name: 'IotDbContext'.","IsKeySet":true,"CurrentValues":{"Properties":[{"$ref":"2"},{"$ref":"23"},{"$ref":"25"},{"$ref":"26"},{"$ref":"28"},{"$ref":"29"},{"$ref":"31"},{"$ref":"33"},{"$ref":"35"},{"$ref":"36"}],"EntityType":{"$ref":"1"}},"OriginalValues":{"Properties":[{"$ref":"2"},{"$ref":"23"},{"$ref":"25"},{"$ref":"26"},{"$ref":"28"},{"$ref":"29"},{"$ref":"31"},{"$ref":"33"},{"$ref":"35"},{"$ref":"36"}],"EntityType":{"$ref":"1"}},"DebugView":{"LongView":"Product {Id: 1} Added\r\n  Id: 1 PK\r\n  Category: <null>\r\n  Code: 'ele'\r\n  DataFormat: <null>\r\n  DeviceCount: 1\r\n  Name: '电梯'\r\n  NetType: 'MQTT'\r\n  NodeType: 'DirectDevice'\r\n  ProtocolType: 'ModbusRTU'\r\n  Secret: '123qweasd'\r\n  Devices: [{Id: 1}]","ShortView":"Product {Id: 1} Added"}}},{"IsModified":false,"IsTemporary":false,"Metadata":{"$ref":"25"},"OriginalValue":"ele","MemberEntry.Metadata":{"$ref":"25"},"CurrentValue":"ele","EntityEntry":{"Entity":{"$ref":"20"},"State":"Added","Context":{"$ref":"21"},"Metadata":{"$ref":"1"},"Members":"threw System.ObjectDisposedException: Cannot access a disposed context instance. A common cause of this error is disposing a context instance that was resolved from dependency injection and then later trying to use the same context instance elsewhere in your application. This may occur if you are calling 'Dispose' on the context instance, or wrapping it in a using statement. If you are using dependency injection, you should let the dependency injection container take care of disposing context instances.\r\nObject name: 'IotDbContext'.","Navigations":"threw System.ObjectDisposedException: Cannot access a disposed context instance. A common cause of this error is disposing a context instance that was resolved from dependency injection and then later trying to use the same context instance elsewhere in your application. This may occur if you are calling 'Dispose' on the context instance, or wrapping it in a using statement. If you are using dependency injection, you should let the dependency injection container take care of disposing context instances.\r\nObject name: 'IotDbContext'.","Properties":[{"IsModified":false,"IsTemporary":false,"Metadata":{"$ref":"2"},"OriginalValue":1,"MemberEntry.Metadata":{"$ref":"2"},"CurrentValue":1,"EntityEntry":{"Entity":{},"State":"Added","Context":{},"Metadata":{},"Members":"threw System.ObjectDisposedException: Cannot access a disposed context instance. A common cause of this error is disposing a context instance that was resolved from dependency injection and then later trying to use the same context instance elsewhere in your application. This may occur if you are calling 'Dispose' on the context instance, or wrapping it in a using statement. If you are using dependency injection, you should let the dependency injection container take care of disposing context instances.\r\nObject name: 'IotDbContext'.","Navigations":"threw System.ObjectDisposedException: Cannot access a disposed context instance. A common cause of this error is disposing a context instance that was resolved from dependency injection and then later trying to use the same context instance elsewhere in your application. This may occur if you are calling 'Dispose' on the context instance, or wrapping it in a using statement. If you are using dependency injection, you should let the dependency injection container take care of disposing context instances.\r\nObject name: 'IotDbContext'.","Properties":[null,null,null,null,null,null,null,null,null,null],"References":[],"Collections":"threw System.ObjectDisposedException: Cannot access a disposed context instance. A common cause of this error is disposing a context instance that was resolved from dependency injection and then later trying to use the same context instance elsewhere in your application. This may occur if you are calling 'Dispose' on the context instance, or wrapping it in a using statement. If you are using dependency injection, you should let the dependency injection container take care of disposing context instances.\r\nObject name: 'IotDbContext'.","IsKeySet":true,"CurrentValues":{},"OriginalValues":{},"DebugView":{}}},{"IsModified":false,"IsTemporary":false,"Metadata":{"$ref":"23"},"OriginalValue":null,"MemberEntry.Metadata":{"$ref":"23"},"CurrentValue":null,"EntityEntry":{"Entity":{},"State":"Added","Context":{},"Metadata":{},"Members":"threw System.ObjectDisposedException: Cannot access a disposed context instance. A common cause of this error is disposing a context instance that was resolved from dependency injection and then later trying to use the same context instance elsewhere in your application. This may occur if you are calling 'Dispose' on the context instance, or wrapping it in a using statement. If you are using dependency injection, you should let the dependency injection container take care of disposing context instances.\r\nObject name: 'IotDbContext'.","Navigations":"threw System.ObjectDisposedException: Cannot access a disposed context instance. A common cause of this error is disposing a context instance that was resolved from dependency injection and then later trying to use the same context instance elsewhere in your application. This may occur if you are calling 'Dispose' on the context instance, or wrapping it in a using statement. If you are using dependency injection, you should let the dependency injection container take care of disposing context instances.\r\nObject name: 'IotDbContext'.","Properties":[null,null,null,null,null,null,null,null,null,null],"References":[],"Collections":"threw System.ObjectDisposedException: Cannot access a disposed context instance. A common cause of this error is disposing a context instance that was resolved from dependency injection and then later trying to use the same context instance elsewhere in your application. This may occur if you are calling 'Dispose' on the context instance, or wrapping it in a using statement. If you are using dependency injection, you should let the dependency injection container take care of disposing context instances.\r\nObject name: 'IotDbContext'.","IsKeySet":true,"CurrentValues":{},"OriginalValues":{},"DebugView":{}}},{"IsModified":false,"IsTemporary":false,"Metadata":{"$ref":"25"},"OriginalValue":"ele","MemberEntry.Metadata":{"$ref":"25"},"CurrentValue":"ele","EntityEntry":{"Entity":{},"State":"Added","Context":{},"Metadata":{},"Members":"threw System.ObjectDisposedException: Cannot access a disposed context instance. A common cause of this error is disposing a context instance that was resolved from dependency injection and then later trying to use the same context instance elsewhere in your application. This may occur if you are calling 'Dispose' on the context instance, or wrapping it in a using statement. If you are using dependency injection, you should let the dependency injection container take care of disposing context instances.\r\nObject name: 'IotDbContext'.","Navigations":"threw System.ObjectDisposedException: Cannot access a disposed context instance. A common cause of this error is disposing a context instance that was resolved from dependency injection and then later trying to use the same context instance elsewhere in your application. This may occur if you are calling 'Dispose' on the context instance, or wrapping it in a using statement. If you are using dependency injection, you should let the dependency injection container take care of disposing context instances.\r\nObject name: 'IotDbContext'.","Properties":[null,null,null,null,null,null,null,null,null,null],"References":[],"Collections":"threw System.ObjectDisposedException: Cannot access a disposed context instance. A common cause of this error is disposing a context instance that was resolved from dependency injection and then later trying to use the same context instance elsewhere in your application. This may occur if you are calling 'Dispose' on the context instance, or wrapping it in a using statement. If you are using dependency injection, you should let the dependency injection container take care of disposing context instances.\r\nObject name: 'IotDbContext'.","IsKeySet":true,"CurrentValues":{},"OriginalValues":{},"DebugView":{}}},{"IsModified":false,"IsTemporary":false,"Metadata":{"$ref":"26"},"OriginalValue":null,"MemberEntry.Metadata":{"$ref":"26"},"CurrentValue":null,"EntityEntry":{"Entity":{},"State":"Added","Context":{},"Metadata":{},"Members":"threw System.ObjectDisposedException: Cannot access a disposed context instance. A common cause of this error is disposing a context instance that was resolved from dependency injection and then later trying to use the same context instance elsewhere in your application. This may occur if you are calling 'Dispose' on the context instance, or wrapping it in a using statement. If you are using dependency injection, you should let the dependency injection container take care of disposing context instances.\r\nObject name: 'IotDbContext'.","Navigations":"threw System.ObjectDisposedException: Cannot access a disposed context instance. A common cause of this error is disposing a context instance that was resolved from dependency injection and then later trying to use the same context instance elsewhere in your application. This may occur if you are calling 'Dispose' on the context instance, or wrapping it in a using statement. If you are using dependency injection, you should let the dependency injection container take care of disposing context instances.\r\nObject name: 'IotDbContext'.","Properties":[null,null,null,null,null,null,null,null,null,null],"References":[],"Collections":"threw System.ObjectDisposedException: Cannot access a disposed context instance. A common cause of this error is disposing a context instance that was resolved from dependency injection and then later trying to use the same context instance elsewhere in your application. This may occur if you are calling 'Dispose' on the context instance, or wrapping it in a using statement. If you are using dependency injection, you should let the dependency injection container take care of disposing context instances.\r\nObject name: 'IotDbContext'.","IsKeySet":true,"CurrentValues":{},"OriginalValues":{},"DebugView":{}}},{"IsModified":false,"IsTemporary":false,"Metadata":{"$ref":"28"},"OriginalValue":1,"MemberEntry.Metadata":{"$ref":"28"},"CurrentValue":1,"EntityEntry":{"Entity":{},"State":"Added","Context":{},"Metadata":{},"Members":"threw System.ObjectDisposedException: Cannot access a disposed context instance. A common cause of this error is disposing a context instance that was resolved from dependency injection and then later trying to use the same context instance elsewhere in your application. This may occur if you are calling 'Dispose' on the context instance, or wrapping it in a using statement. If you are using dependency injection, you should let the dependency injection container take care of disposing context instances.\r\nObject name: 'IotDbContext'.","Navigations":"threw System.ObjectDisposedException: Cannot access a disposed context instance. A common cause of this error is disposing a context instance that was resolved from dependency injection and then later trying to use the same context instance elsewhere in your application. This may occur if you are calling 'Dispose' on the context instance, or wrapping it in a using statement. If you are using dependency injection, you should let the dependency injection container take care of disposing context instances.\r\nObject name: 'IotDbContext'.","Properties":[null,null,null,null,null,null,null,null,null,null],"References":[],"Collections":"threw System.ObjectDisposedException: Cannot access a disposed context instance. A common cause of this error is disposing a context instance that was resolved from dependency injection and then later trying to use the same context instance elsewhere in your application. This may occur if you are calling 'Dispose' on the context instance, or wrapping it in a using statement. If you are using dependency injection, you should let the dependency injection container take care of disposing context instances.\r\nObject name: 'IotDbContext'.","IsKeySet":true,"CurrentValues":{},"OriginalValues":{},"DebugView":{}}},{"IsModified":false,"IsTemporary":false,"Metadata":{"$ref":"29"},"OriginalValue":"电梯","MemberEntry.Metadata":{"$ref":"29"},"CurrentValue":"电梯","EntityEntry":{"Entity":{},"State":"Added","Context":{},"Metadata":{},"Members":"threw System.ObjectDisposedException: Cannot access a disposed context instance. A common cause of this error is disposing a context instance that was resolved from dependency injection and then later trying to use the same context instance elsewhere in your application. This may occur if you are calling 'Dispose' on the context instance, or wrapping it in a using statement. If you are using dependency injection, you should let the dependency injection container take care of disposing context instances.\r\nObject name: 'IotDbContext'.","Navigations":"threw System.ObjectDisposedException: Cannot access a disposed context instance. A common cause of this error is disposing a context instance that was resolved from dependency injection and then later trying to use the same context instance elsewhere in your application. This may occur if you are calling 'Dispose' on the context instance, or wrapping it in a using statement. If you are using dependency injection, you should let the dependency injection container take care of disposing context instances.\r\nObject name: 'IotDbContext'.","Properties":[null,null,null,null,null,null,null,null,null,null],"References":[],"Collections":"threw System.ObjectDisposedException: Cannot access a disposed context instance. A common cause of this error is disposing a context instance that was resolved from dependency injection and then later trying to use the same context instance elsewhere in your application. This may occur if you are calling 'Dispose' on the context instance, or wrapping it in a using statement. If you are using dependency injection, you should let the dependency injection container take care of disposing context instances.\r\nObject name: 'IotDbContext'.","IsKeySet":true,"CurrentValues":{},"OriginalValues":{},"DebugView":{}}},{"IsModified":false,"IsTemporary":false,"Metadata":{"$ref":"31"},"OriginalValue":"MQTT","MemberEntry.Metadata":{"$ref":"31"},"CurrentValue":"MQTT","EntityEntry":{"Entity":{},"State":"Added","Context":{},"Metadata":{},"Members":"threw System.ObjectDisposedException: Cannot access a disposed context instance. A common cause of this error is disposing a context instance that was resolved from dependency injection and then later trying to use the same context instance elsewhere in your application. This may occur if you are calling 'Dispose' on the context instance, or wrapping it in a using statement. If you are using dependency injection, you should let the dependency injection container take care of disposing context instances.\r\nObject name: 'IotDbContext'.","Navigations":"threw System.ObjectDisposedException: Cannot access a disposed context instance. A common cause of this error is disposing a context instance that was resolved from dependency injection and then later trying to use the same context instance elsewhere in your application. This may occur if you are calling 'Dispose' on the context instance, or wrapping it in a using statement. If you are using dependency injection, you should let the dependency injection container take care of disposing context instances.\r\nObject name: 'IotDbContext'.","Properties":[null,null,null,null,null,null,null,null,null,null],"References":[],"Collections":"threw System.ObjectDisposedException: Cannot access a disposed context instance. A common cause of this error is disposing a context instance that was resolved from dependency injection and then later trying to use the same context instance elsewhere in your application. This may occur if you are calling 'Dispose' on the context instance, or wrapping it in a using statement. If you are using dependency injection, you should let the dependency injection container take care of disposing context instances.\r\nObject name: 'IotDbContext'.","IsKeySet":true,"CurrentValues":{},"OriginalValues":{},"DebugView":{}}},{"IsModified":false,"IsTemporary":false,"Metadata":{"$ref":"33"},"OriginalValue":"DirectDevice","MemberEntry.Metadata":{"$ref":"33"},"CurrentValue":"DirectDevice","EntityEntry":{"Entity":{},"State":"Added","Context":{},"Metadata":{},"Members":"threw System.ObjectDisposedException: Cannot access a disposed context instance. A common cause of this error is disposing a context instance that was resolved from dependency injection and then later trying to use the same context instance elsewhere in your application. This may occur if you are calling 'Dispose' on the context instance, or wrapping it in a using statement. If you are using dependency injection, you should let the dependency injection container take care of disposing context instances.\r\nObject name: 'IotDbContext'.","Navigations":"threw System.ObjectDisposedException: Cannot access a disposed context instance. A common cause of this error is disposing a context instance that was resolved from dependency injection and then later trying to use the same context instance elsewhere in your application. This may occur if you are calling 'Dispose' on the context instance, or wrapping it in a using statement. If you are using dependency injection, you should let the dependency injection container take care of disposing context instances.\r\nObject name: 'IotDbContext'.","Properties":[null,null,null,null,null,null,null,null,null,null],"References":[],"Collections":"threw System.ObjectDisposedException: Cannot access a disposed context instance. A common cause of this error is disposing a context instance that was resolved from dependency injection and then later trying to use the same context instance elsewhere in your application. This may occur if you are calling 'Dispose' on the context instance, or wrapping it in a using statement. If you are using dependency injection, you should let the dependency injection container take care of disposing context instances.\r\nObject name: 'IotDbContext'.","IsKeySet":true,"CurrentValues":{},"OriginalValues":{},"DebugView":{}}},{"IsModified":false,"IsTemporary":false,"Metadata":{"$ref":"35"},"OriginalValue":"ModbusRTU","MemberEntry.Metadata":{"$ref":"35"},"CurrentValue":"ModbusRTU","EntityEntry":{"Entity":{},"State":"Added","Context":{},"Metadata":{},"Members":"threw System.ObjectDisposedException: Cannot access a disposed context instance. A common cause of this error is disposing a context instance that was resolved from dependency injection and then later trying to use the same context instance elsewhere in your application. This may occur if you are calling 'Dispose' on the context instance, or wrapping it in a using statement. If you are using dependency injection, you should let the dependency injection container take care of disposing context instances.\r\nObject name: 'IotDbContext'.","Navigations":"threw System.ObjectDisposedException: Cannot access a disposed context instance. A common cause of this error is disposing a context instance that was resolved from dependency injection and then later trying to use the same context instance elsewhere in your application. This may occur if you are calling 'Dispose' on the context instance, or wrapping it in a using statement. If you are using dependency injection, you should let the dependency injection container take care of disposing context instances.\r\nObject name: 'IotDbContext'.","Properties":[null,null,null,null,null,null,null,null,null,null],"References":[],"Collections":"threw System.ObjectDisposedException: Cannot access a disposed context instance. A common cause of this error is disposing a context instance that was resolved from dependency injection and then later trying to use the same context instance elsewhere in your application. This may occur if you are calling 'Dispose' on the context instance, or wrapping it in a using statement. If you are using dependency injection, you should let the dependency injection container take care of disposing context instances.\r\nObject name: 'IotDbContext'.","IsKeySet":true,"CurrentValues":{},"OriginalValues":{},"DebugView":{}}},{"IsModified":false,"IsTemporary":false,"Metadata":{"$ref":"36"},"OriginalValue":"123qweasd","MemberEntry.Metadata":{"$ref":"36"},"CurrentValue":"123qweasd","EntityEntry":{"Entity":{},"State":"Added","Context":{},"Metadata":{},"Members":"threw System.ObjectDisposedException: Cannot access a disposed context instance. A common cause of this error is disposing a context instance that was resolved from dependency injection and then later trying to use the same context instance elsewhere in your application. This may occur if you are calling 'Dispose' on the context instance, or wrapping it in a using statement. If you are using dependency injection, you should let the dependency injection container take care of disposing context instances.\r\nObject name: 'IotDbContext'.","Navigations":"threw System.ObjectDisposedException: Cannot access a disposed context instance. A common cause of this error is disposing a context instance that was resolved from dependency injection and then later trying to use the same context instance elsewhere in your application. This may occur if you are calling 'Dispose' on the context instance, or wrapping it in a using statement. If you are using dependency injection, you should let the dependency injection container take care of disposing context instances.\r\nObject name: 'IotDbContext'.","Properties":[null,null,null,null,null,null,null,null,null,null],"References":[],"Collections":"threw System.ObjectDisposedException: Cannot access a disposed context instance. A common cause of this error is disposing a context instance that was resolved from dependency injection and then later trying to use the same context instance elsewhere in your application. This may occur if you are calling 'Dispose' on the context instance, or wrapping it in a using statement. If you are using dependency injection, you should let the dependency injection container take care of disposing context instances.\r\nObject name: 'IotDbContext'.","IsKeySet":true,"CurrentValues":{},"OriginalValues":{},"DebugView":{}}}],"References":[],"Collections":"threw System.ObjectDisposedException: Cannot access a disposed context instance. A common cause of this error is disposing a context instance that was resolved from dependency injection and then later trying to use the same context instance elsewhere in your application. This may occur if you are calling 'Dispose' on the context instance, or wrapping it in a using statement. If you are using dependency injection, you should let the dependency injection container take care of disposing context instances.\r\nObject name: 'IotDbContext'.","IsKeySet":true,"CurrentValues":{"Properties":[{"$ref":"2"},{"$ref":"23"},{"$ref":"25"},{"$ref":"26"},{"$ref":"28"},{"$ref":"29"},{"$ref":"31"},{"$ref":"33"},{"$ref":"35"},{"$ref":"36"}],"EntityType":{"$ref":"1"}},"OriginalValues":{"Properties":[{"$ref":"2"},{"$ref":"23"},{"$ref":"25"},{"$ref":"26"},{"$ref":"28"},{"$ref":"29"},{"$ref":"31"},{"$ref":"33"},{"$ref":"35"},{"$ref":"36"}],"EntityType":{"$ref":"1"}},"DebugView":{"LongView":"Product {Id: 1} Added\r\n  Id: 1 PK\r\n  Category: <null>\r\n  Code: 'ele'\r\n  DataFormat: <null>\r\n  DeviceCount: 1\r\n  Name: '电梯'\r\n  NetType: 'MQTT'\r\n  NodeType: 'DirectDevice'\r\n  ProtocolType: 'ModbusRTU'\r\n  Secret: '123qweasd'\r\n  Devices: [{Id: 1}]","ShortView":"Product {Id: 1} Added"}}},{"IsModified":false,"IsTemporary":false,"Metadata":{"$ref":"26"},"OriginalValue":null,"MemberEntry.Metadata":{"$ref":"26"},"CurrentValue":null,"EntityEntry":{"Entity":{"$ref":"20"},"State":"Added","Context":{"$ref":"21"},"Metadata":{"$ref":"1"},"Members":"threw System.ObjectDisposedException: Cannot access a disposed context instance. A common cause of this error is disposing a context instance that was resolved from dependency injection and then later trying to use the same context instance elsewhere in your application. This may occur if you are calling 'Dispose' on the context instance, or wrapping it in a using statement. If you are using dependency injection, you should let the dependency injection container take care of disposing context instances.\r\nObject name: 'IotDbContext'.","Navigations":"threw System.ObjectDisposedException: Cannot access a disposed context instance. A common cause of this error is disposing a context instance that was resolved from dependency injection and then later trying to use the same context instance elsewhere in your application. This may occur if you are calling 'Dispose' on the context instance, or wrapping it in a using statement. If you are using dependency injection, you should let the dependency injection container take care of disposing context instances.\r\nObject name: 'IotDbContext'.","Properties":[{"IsModified":false,"IsTemporary":false,"Metadata":{"$ref":"2"},"OriginalValue":1,"MemberEntry.Metadata":{"$ref":"2"},"CurrentValue":1,"EntityEntry":{"Entity":{},"State":"Added","Context":{},"Metadata":{},"Members":"threw System.ObjectDisposedException: Cannot access a disposed context instance. A common cause of this error is disposing a context instance that was resolved from dependency injection and then later trying to use the same context instance elsewhere in your application. This may occur if you are calling 'Dispose' on the context instance, or wrapping it in a using statement. If you are using dependency injection, you should let the dependency injection container take care of disposing context instances.\r\nObject name: 'IotDbContext'.","Navigations":"threw System.ObjectDisposedException: Cannot access a disposed context instance. A common cause of this error is disposing a context instance that was resolved from dependency injection and then later trying to use the same context instance elsewhere in your application. This may occur if you are calling 'Dispose' on the context instance, or wrapping it in a using statement. If you are using dependency injection, you should let the dependency injection container take care of disposing context instances.\r\nObject name: 'IotDbContext'.","Properties":[null,null,null,null,null,null,null,null,null,null],"References":[],"Collections":"threw System.ObjectDisposedException: Cannot access a disposed context instance. A common cause of this error is disposing a context instance that was resolved from dependency injection and then later trying to use the same context instance elsewhere in your application. This may occur if you are calling 'Dispose' on the context instance, or wrapping it in a using statement. If you are using dependency injection, you should let the dependency injection container take care of disposing context instances.\r\nObject name: 'IotDbContext'.","IsKeySet":true,"CurrentValues":{},"OriginalValues":{},"DebugView":{}}},{"IsModified":false,"IsTemporary":false,"Metadata":{"$ref":"23"},"OriginalValue":null,"MemberEntry.Metadata":{"$ref":"23"},"CurrentValue":null,"EntityEntry":{"Entity":{},"State":"Added","Context":{},"Metadata":{},"Members":"threw System.ObjectDisposedException: Cannot access a disposed context instance. A common cause of this error is disposing a context instance that was resolved from dependency injection and then later trying to use the same context instance elsewhere in your application. This may occur if you are calling 'Dispose' on the context instance, or wrapping it in a using statement. If you are using dependency injection, you should let the dependency injection container take care of disposing context instances.\r\nObject name: 'IotDbContext'.","Navigations":"threw System.ObjectDisposedException: Cannot access a disposed context instance. A common cause of this error is disposing a context instance that was resolved from dependency injection and then later trying to use the same context instance elsewhere in your application. This may occur if you are calling 'Dispose' on the context instance, or wrapping it in a using statement. If you are using dependency injection, you should let the dependency injection container take care of disposing context instances.\r\nObject name: 'IotDbContext'.","Properties":[null,null,null,null,null,null,null,null,null,null],"References":[],"Collections":"threw System.ObjectDisposedException: Cannot access a disposed context instance. A common cause of this error is disposing a context instance that was resolved from dependency injection and then later trying to use the same context instance elsewhere in your application. This may occur if you are calling 'Dispose' on the context instance, or wrapping it in a using statement. If you are using dependency injection, you should let the dependency injection container take care of disposing context instances.\r\nObject name: 'IotDbContext'.","IsKeySet":true,"CurrentValues":{},"OriginalValues":{},"DebugView":{}}},{"IsModified":false,"IsTemporary":false,"Metadata":{"$ref":"25"},"OriginalValue":"ele","MemberEntry.Metadata":{"$ref":"25"},"CurrentValue":"ele","EntityEntry":{"Entity":{},"State":"Added","Context":{},"Metadata":{},"Members":"threw System.ObjectDisposedException: Cannot access a disposed context instance. A common cause of this error is disposing a context instance that was resolved from dependency injection and then later trying to use the same context instance elsewhere in your application. This may occur if you are calling 'Dispose' on the context instance, or wrapping it in a using statement. If you are using dependency injection, you should let the dependency injection container take care of disposing context instances.\r\nObject name: 'IotDbContext'.","Navigations":"threw System.ObjectDisposedException: Cannot access a disposed context instance. A common cause of this error is disposing a context instance that was resolved from dependency injection and then later trying to use the same context instance elsewhere in your application. This may occur if you are calling 'Dispose' on the context instance, or wrapping it in a using statement. If you are using dependency injection, you should let the dependency injection container take care of disposing context instances.\r\nObject name: 'IotDbContext'.","Properties":[null,null,null,null,null,null,null,null,null,null],"References":[],"Collections":"threw System.ObjectDisposedException: Cannot access a disposed context instance. A common cause of this error is disposing a context instance that was resolved from dependency injection and then later trying to use the same context instance elsewhere in your application. This may occur if you are calling 'Dispose' on the context instance, or wrapping it in a using statement. If you are using dependency injection, you should let the dependency injection container take care of disposing context instances.\r\nObject name: 'IotDbContext'.","IsKeySet":true,"CurrentValues":{},"OriginalValues":{},"DebugView":{}}},{"IsModified":false,"IsTemporary":false,"Metadata":{"$ref":"26"},"OriginalValue":null,"MemberEntry.Metadata":{"$ref":"26"},"CurrentValue":null,"EntityEntry":{"Entity":{},"State":"Added","Context":{},"Metadata":{},"Members":"threw System.ObjectDisposedException: Cannot access a disposed context instance. A common cause of this error is disposing a context instance that was resolved from dependency injection and then later trying to use the same context instance elsewhere in your application. This may occur if you are calling 'Dispose' on the context instance, or wrapping it in a using statement. If you are using dependency injection, you should let the dependency injection container take care of disposing context instances.\r\nObject name: 'IotDbContext'.","Navigations":"threw System.ObjectDisposedException: Cannot access a disposed context instance. A common cause of this error is disposing a context instance that was resolved from dependency injection and then later trying to use the same context instance elsewhere in your application. This may occur if you are calling 'Dispose' on the context instance, or wrapping it in a using statement. If you are using dependency injection, you should let the dependency injection container take care of disposing context instances.\r\nObject name: 'IotDbContext'.","Properties":[null,null,null,null,null,null,null,null,null,null],"References":[],"Collections":"threw System.ObjectDisposedException: Cannot access a disposed context instance. A common cause of this error is disposing a context instance that was resolved from dependency injection and then later trying to use the same context instance elsewhere in your application. This may occur if you are calling 'Dispose' on the context instance, or wrapping it in a using statement. If you are using dependency injection, you should let the dependency injection container take care of disposing context instances.\r\nObject name: 'IotDbContext'.","IsKeySet":true,"CurrentValues":{},"OriginalValues":{},"DebugView":{}}},{"IsModified":false,"IsTemporary":false,"Metadata":{"$ref":"28"},"OriginalValue":1,"MemberEntry.Metadata":{"$ref":"28"},"CurrentValue":1,"EntityEntry":{"Entity":{},"State":"Added","Context":{},"Metadata":{},"Members":"threw System.ObjectDisposedException: Cannot access a disposed context instance. A common cause of this error is disposing a context instance that was resolved from dependency injection and then later trying to use the same context instance elsewhere in your application. This may occur if you are calling 'Dispose' on the context instance, or wrapping it in a using statement. If you are using dependency injection, you should let the dependency injection container take care of disposing context instances.\r\nObject name: 'IotDbContext'.","Navigations":"threw System.ObjectDisposedException: Cannot access a disposed context instance. A common cause of this error is disposing a context instance that was resolved from dependency injection and then later trying to use the same context instance elsewhere in your application. This may occur if you are calling 'Dispose' on the context instance, or wrapping it in a using statement. If you are using dependency injection, you should let the dependency injection container take care of disposing context instances.\r\nObject name: 'IotDbContext'.","Properties":[null,null,null,null,null,null,null,null,null,null],"References":[],"Collections":"threw System.ObjectDisposedException: Cannot access a disposed context instance. A common cause of this error is disposing a context instance that was resolved from dependency injection and then later trying to use the same context instance elsewhere in your application. This may occur if you are calling 'Dispose' on the context instance, or wrapping it in a using statement. If you are using dependency injection, you should let the dependency injection container take care of disposing context instances.\r\nObject name: 'IotDbContext'.","IsKeySet":true,"CurrentValues":{},"OriginalValues":{},"DebugView":{}}},{"IsModified":false,"IsTemporary":false,"Metadata":{"$ref":"29"},"OriginalValue":"电梯","MemberEntry.Metadata":{"$ref":"29"},"CurrentValue":"电梯","EntityEntry":{"Entity":{},"State":"Added","Context":{},"Metadata":{},"Members":"threw System.ObjectDisposedException: Cannot access a disposed context instance. A common cause of this error is disposing a context instance that was resolved from dependency injection and then later trying to use the same context instance elsewhere in your application. This may occur if you are calling 'Dispose' on the context instance, or wrapping it in a using statement. If you are using dependency injection, you should let the dependency injection container take care of disposing context instances.\r\nObject name: 'IotDbContext'.","Navigations":"threw System.ObjectDisposedException: Cannot access a disposed context instance. A common cause of this error is disposing a context instance that was resolved from dependency injection and then later trying to use the same context instance elsewhere in your application. This may occur if you are calling 'Dispose' on the context instance, or wrapping it in a using statement. If you are using dependency injection, you should let the dependency injection container take care of disposing context instances.\r\nObject name: 'IotDbContext'.","Properties":[null,null,null,null,null,null,null,null,null,null],"References":[],"Collections":"threw System.ObjectDisposedException: Cannot access a disposed context instance. A common cause of this error is disposing a context instance that was resolved from dependency injection and then later trying to use the same context instance elsewhere in your application. This may occur if you are calling 'Dispose' on the context instance, or wrapping it in a using statement. If you are using dependency injection, you should let the dependency injection container take care of disposing context instances.\r\nObject name: 'IotDbContext'.","IsKeySet":true,"CurrentValues":{},"OriginalValues":{},"DebugView":{}}},{"IsModified":false,"IsTemporary":false,"Metadata":{"$ref":"31"},"OriginalValue":"MQTT","MemberEntry.Metadata":{"$ref":"31"},"CurrentValue":"MQTT","EntityEntry":{"Entity":{},"State":"Added","Context":{},"Metadata":{},"Members":"threw System.ObjectDisposedException: Cannot access a disposed context instance. A common cause of this error is disposing a context instance that was resolved from dependency injection and then later trying to use the same context instance elsewhere in your application. This may occur if you are calling 'Dispose' on the context instance, or wrapping it in a using statement. If you are using dependency injection, you should let the dependency injection container take care of disposing context instances.\r\nObject name: 'IotDbContext'.","Navigations":"threw System.ObjectDisposedException: Cannot access a disposed context instance. A common cause of this error is disposing a context instance that was resolved from dependency injection and then later trying to use the same context instance elsewhere in your application. This may occur if you are calling 'Dispose' on the context instance, or wrapping it in a using statement. If you are using dependency injection, you should let the dependency injection container take care of disposing context instances.\r\nObject name: 'IotDbContext'.","Properties":[null,null,null,null,null,null,null,null,null,null],"References":[],"Collections":"threw System.ObjectDisposedException: Cannot access a disposed context instance. A common cause of this error is disposing a context instance that was resolved from dependency injection and then later trying to use the same context instance elsewhere in your application. This may occur if you are calling 'Dispose' on the context instance, or wrapping it in a using statement. If you are using dependency injection, you should let the dependency injection container take care of disposing context instances.\r\nObject name: 'IotDbContext'.","IsKeySet":true,"CurrentValues":{},"OriginalValues":{},"DebugView":{}}},{"IsModified":false,"IsTemporary":false,"Metadata":{"$ref":"33"},"OriginalValue":"DirectDevice","MemberEntry.Metadata":{"$ref":"33"},"CurrentValue":"DirectDevice","EntityEntry":{"Entity":{},"State":"Added","Context":{},"Metadata":{},"Members":"threw System.ObjectDisposedException: Cannot access a disposed context instance. A common cause of this error is disposing a context instance that was resolved from dependency injection and then later trying to use the same context instance elsewhere in your application. This may occur if you are calling 'Dispose' on the context instance, or wrapping it in a using statement. If you are using dependency injection, you should let the dependency injection container take care of disposing context instances.\r\nObject name: 'IotDbContext'.","Navigations":"threw System.ObjectDisposedException: Cannot access a disposed context instance. A common cause of this error is disposing a context instance that was resolved from dependency injection and then later trying to use the same context instance elsewhere in your application. This may occur if you are calling 'Dispose' on the context instance, or wrapping it in a using statement. If you are using dependency injection, you should let the dependency injection container take care of disposing context instances.\r\nObject name: 'IotDbContext'.","Properties":[null,null,null,null,null,null,null,null,null,null],"References":[],"Collections":"threw System.ObjectDisposedException: Cannot access a disposed context instance. A common cause of this error is disposing a context instance that was resolved from dependency injection and then later trying to use the same context instance elsewhere in your application. This may occur if you are calling 'Dispose' on the context instance, or wrapping it in a using statement. If you are using dependency injection, you should let the dependency injection container take care of disposing context instances.\r\nObject name: 'IotDbContext'.","IsKeySet":true,"CurrentValues":{},"OriginalValues":{},"DebugView":{}}},{"IsModified":false,"IsTemporary":false,"Metadata":{"$ref":"35"},"OriginalValue":"ModbusRTU","MemberEntry.Metadata":{"$ref":"35"},"CurrentValue":"ModbusRTU","EntityEntry":{"Entity":{},"State":"Added","Context":{},"Metadata":{},"Members":"threw System.ObjectDisposedException: Cannot access a disposed context instance. A common cause of this error is disposing a context instance that was resolved from dependency injection and then later trying to use the same context instance elsewhere in your application. This may occur if you are calling 'Dispose' on the context instance, or wrapping it in a using statement. If you are using dependency injection, you should let the dependency injection container take care of disposing context instances.\r\nObject name: 'IotDbContext'.","Navigations":"threw System.ObjectDisposedException: Cannot access a disposed context instance. A common cause of this error is disposing a context instance that was resolved from dependency injection and then later trying to use the same context instance elsewhere in your application. This may occur if you are calling 'Dispose' on the context instance, or wrapping it in a using statement. If you are using dependency injection, you should let the dependency injection container take care of disposing context instances.\r\nObject name: 'IotDbContext'.","Properties":[null,null,null,null,null,null,null,null,null,null],"References":[],"Collections":"threw System.ObjectDisposedException: Cannot access a disposed context instance. A common cause of this error is disposing a context instance that was resolved from dependency injection and then later trying to use the same context instance elsewhere in your application. This may occur if you are calling 'Dispose' on the context instance, or wrapping it in a using statement. If you are using dependency injection, you should let the dependency injection container take care of disposing context instances.\r\nObject name: 'IotDbContext'.","IsKeySet":true,"CurrentValues":{},"OriginalValues":{},"DebugView":{}}},{"IsModified":false,"IsTemporary":false,"Metadata":{"$ref":"36"},"OriginalValue":"123qweasd","MemberEntry.Metadata":{"$ref":"36"},"CurrentValue":"123qweasd","EntityEntry":{"Entity":{},"State":"Added","Context":{},"Metadata":{},"Members":"threw System.ObjectDisposedException: Cannot access a disposed context instance. A common cause of this error is disposing a context instance that was resolved from dependency injection and then later trying to use the same context instance elsewhere in your application. This may occur if you are calling 'Dispose' on the context instance, or wrapping it in a using statement. If you are using dependency injection, you should let the dependency injection container take care of disposing context instances.\r\nObject name: 'IotDbContext'.","Navigations":"threw System.ObjectDisposedException: Cannot access a disposed context instance. A common cause of this error is disposing a context instance that was resolved from dependency injection and then later trying to use the same context instance elsewhere in your application. This may occur if you are calling 'Dispose' on the context instance, or wrapping it in a using statement. If you are using dependency injection, you should let the dependency injection container take care of disposing context instances.\r\nObject name: 'IotDbContext'.","Properties":[null,null,null,null,null,null,null,null,null,null],"References":[],"Collections":"threw System.ObjectDisposedException: Cannot access a disposed context instance. A common cause of this error is disposing a context instance that was resolved from dependency injection and then later trying to use the same context instance elsewhere in your application. This may occur if you are calling 'Dispose' on the context instance, or wrapping it in a using statement. If you are using dependency injection, you should let the dependency injection container take care of disposing context instances.\r\nObject name: 'IotDbContext'.","IsKeySet":true,"CurrentValues":{},"OriginalValues":{},"DebugView":{}}}],"References":[],"Collections":"threw System.ObjectDisposedException: Cannot access a disposed context instance. A common cause of this error is disposing a context instance that was resolved from dependency injection and then later trying to use the same context instance elsewhere in your application. This may occur if you are calling 'Dispose' on the context instance, or wrapping it in a using statement. If you are using dependency injection, you should let the dependency injection container take care of disposing context instances.\r\nObject name: 'IotDbContext'.","IsKeySet":true,"CurrentValues":{"Properties":[{"$ref":"2"},{"$ref":"23"},{"$ref":"25"},{"$ref":"26"},{"$ref":"28"},{"$ref":"29"},{"$ref":"31"},{"$ref":"33"},{"$ref":"35"},{"$ref":"36"}],"EntityType":{"$ref":"1"}},"OriginalValues":{"Properties":[{"$ref":"2"},{"$ref":"23"},{"$ref":"25"},{"$ref":"26"},{"$ref":"28"},{"$ref":"29"},{"$ref":"31"},{"$ref":"33"},{"$ref":"35"},{"$ref":"36"}],"EntityType":{"$ref":"1"}},"DebugView":{"LongView":"Product {Id: 1} Added\r\n  Id: 1 PK\r\n  Category: <null>\r\n  Code: 'ele'\r\n  DataFormat: <null>\r\n  DeviceCount: 1\r\n  Name: '电梯'\r\n  NetType: 'MQTT'\r\n  NodeType: 'DirectDevice'\r\n  ProtocolType: 'ModbusRTU'\r\n  Secret: '123qweasd'\r\n  Devices: [{Id: 1}]","ShortView":"Product {Id: 1} Added"}}},{"IsModified":false,"IsTemporary":false,"Metadata":{"$ref":"28"},"OriginalValue":1,"MemberEntry.Metadata":{"$ref":"28"},"CurrentValue":1,"EntityEntry":{"Entity":{"$ref":"20"},"State":"Added","Context":{"$ref":"21"},"Metadata":{"$ref":"1"},"Members":"threw System.ObjectDisposedException: Cannot access a disposed context instance. A common cause of this error is disposing a context instance that was resolved from dependency injection and then later trying to use the same context instance elsewhere in your application. This may occur if you are calling 'Dispose' on the context instance, or wrapping it in a using statement. If you are using dependency injection, you should let the dependency injection container take care of disposing context instances.\r\nObject name: 'IotDbContext'.","Navigations":"threw System.ObjectDisposedException: Cannot access a disposed context instance. A common cause of this error is disposing a context instance that was resolved from dependency injection and then later trying to use the same context instance elsewhere in your application. This may occur if you are calling 'Dispose' on the context instance, or wrapping it in a using statement. If you are using dependency injection, you should let the dependency injection container take care of disposing context instances.\r\nObject name: 'IotDbContext'.","Properties":[{"IsModified":false,"IsTemporary":false,"Metadata":{"$ref":"2"},"OriginalValue":1,"MemberEntry.Metadata":{"$ref":"2"},"CurrentValue":1,"EntityEntry":{"Entity":{},"State":"Added","Context":{},"Metadata":{},"Members":"threw System.ObjectDisposedException: Cannot access a disposed context instance. A common cause of this error is disposing a context instance that was resolved from dependency injection and then later trying to use the same context instance elsewhere in your application. This may occur if you are calling 'Dispose' on the context instance, or wrapping it in a using statement. If you are using dependency injection, you should let the dependency injection container take care of disposing context instances.\r\nObject name: 'IotDbContext'.","Navigations":"threw System.ObjectDisposedException: Cannot access a disposed context instance. A common cause of this error is disposing a context instance that was resolved from dependency injection and then later trying to use the same context instance elsewhere in your application. This may occur if you are calling 'Dispose' on the context instance, or wrapping it in a using statement. If you are using dependency injection, you should let the dependency injection container take care of disposing context instances.\r\nObject name: 'IotDbContext'.","Properties":[null,null,null,null,null,null,null,null,null,null],"References":[],"Collections":"threw System.ObjectDisposedException: Cannot access a disposed context instance. A common cause of this error is disposing a context instance that was resolved from dependency injection and then later trying to use the same context instance elsewhere in your application. This may occur if you are calling 'Dispose' on the context instance, or wrapping it in a using statement. If you are using dependency injection, you should let the dependency injection container take care of disposing context instances.\r\nObject name: 'IotDbContext'.","IsKeySet":true,"CurrentValues":{},"OriginalValues":{},"DebugView":{}}},{"IsModified":false,"IsTemporary":false,"Metadata":{"$ref":"23"},"OriginalValue":null,"MemberEntry.Metadata":{"$ref":"23"},"CurrentValue":null,"EntityEntry":{"Entity":{},"State":"Added","Context":{},"Metadata":{},"Members":"threw System.ObjectDisposedException: Cannot access a disposed context instance. A common cause of this error is disposing a context instance that was resolved from dependency injection and then later trying to use the same context instance elsewhere in your application. This may occur if you are calling 'Dispose' on the context instance, or wrapping it in a using statement. If you are using dependency injection, you should let the dependency injection container take care of disposing context instances.\r\nObject name: 'IotDbContext'.","Navigations":"threw System.ObjectDisposedException: Cannot access a disposed context instance. A common cause of this error is disposing a context instance that was resolved from dependency injection and then later trying to use the same context instance elsewhere in your application. This may occur if you are calling 'Dispose' on the context instance, or wrapping it in a using statement. If you are using dependency injection, you should let the dependency injection container take care of disposing context instances.\r\nObject name: 'IotDbContext'.","Properties":[null,null,null,null,null,null,null,null,null,null],"References":[],"Collections":"threw System.ObjectDisposedException: Cannot access a disposed context instance. A common cause of this error is disposing a context instance that was resolved from dependency injection and then later trying to use the same context instance elsewhere in your application. This may occur if you are calling 'Dispose' on the context instance, or wrapping it in a using statement. If you are using dependency injection, you should let the dependency injection container take care of disposing context instances.\r\nObject name: 'IotDbContext'.","IsKeySet":true,"CurrentValues":{},"OriginalValues":{},"DebugView":{}}},{"IsModified":false,"IsTemporary":false,"Metadata":{"$ref":"25"},"OriginalValue":"ele","MemberEntry.Metadata":{"$ref":"25"},"CurrentValue":"ele","EntityEntry":{"Entity":{},"State":"Added","Context":{},"Metadata":{},"Members":"threw System.ObjectDisposedException: Cannot access a disposed context instance. A common cause of this error is disposing a context instance that was resolved from dependency injection and then later trying to use the same context instance elsewhere in your application. This may occur if you are calling 'Dispose' on the context instance, or wrapping it in a using statement. If you are using dependency injection, you should let the dependency injection container take care of disposing context instances.\r\nObject name: 'IotDbContext'.","Navigations":"threw System.ObjectDisposedException: Cannot access a disposed context instance. A common cause of this error is disposing a context instance that was resolved from dependency injection and then later trying to use the same context instance elsewhere in your application. This may occur if you are calling 'Dispose' on the context instance, or wrapping it in a using statement. If you are using dependency injection, you should let the dependency injection container take care of disposing context instances.\r\nObject name: 'IotDbContext'.","Properties":[null,null,null,null,null,null,null,null,null,null],"References":[],"Collections":"threw System.ObjectDisposedException: Cannot access a disposed context instance. A common cause of this error is disposing a context instance that was resolved from dependency injection and then later trying to use the same context instance elsewhere in your application. This may occur if you are calling 'Dispose' on the context instance, or wrapping it in a using statement. If you are using dependency injection, you should let the dependency injection container take care of disposing context instances.\r\nObject name: 'IotDbContext'.","IsKeySet":true,"CurrentValues":{},"OriginalValues":{},"DebugView":{}}},{"IsModified":false,"IsTemporary":false,"Metadata":{"$ref":"26"},"OriginalValue":null,"MemberEntry.Metadata":{"$ref":"26"},"CurrentValue":null,"EntityEntry":{"Entity":{},"State":"Added","Context":{},"Metadata":{},"Members":"threw System.ObjectDisposedException: Cannot access a disposed context instance. A common cause of this error is disposing a context instance that was resolved from dependency injection and then later trying to use the same context instance elsewhere in your application. This may occur if you are calling 'Dispose' on the context instance, or wrapping it in a using statement. If you are using dependency injection, you should let the dependency injection container take care of disposing context instances.\r\nObject name: 'IotDbContext'.","Navigations":"threw System.ObjectDisposedException: Cannot access a disposed context instance. A common cause of this error is disposing a context instance that was resolved from dependency injection and then later trying to use the same context instance elsewhere in your application. This may occur if you are calling 'Dispose' on the context instance, or wrapping it in a using statement. If you are using dependency injection, you should let the dependency injection container take care of disposing context instances.\r\nObject name: 'IotDbContext'.","Properties":[null,null,null,null,null,null,null,null,null,null],"References":[],"Collections":"threw System.ObjectDisposedException: Cannot access a disposed context instance. A common cause of this error is disposing a context instance that was resolved from dependency injection and then later trying to use the same context instance elsewhere in your application. This may occur if you are calling 'Dispose' on the context instance, or wrapping it in a using statement. If you are using dependency injection, you should let the dependency injection container take care of disposing context instances.\r\nObject name: 'IotDbContext'.","IsKeySet":true,"CurrentValues":{},"OriginalValues":{},"DebugView":{}}},{"IsModified":false,"IsTemporary":false,"Metadata":{"$ref":"28"},"OriginalValue":1,"MemberEntry.Metadata":{"$ref":"28"},"CurrentValue":1,"EntityEntry":{"Entity":{},"State":"Added","Context":{},"Metadata":{},"Members":"threw System.ObjectDisposedException: Cannot access a disposed context instance. A common cause of this error is disposing a context instance that was resolved from dependency injection and then later trying to use the same context instance elsewhere in your application. This may occur if you are calling 'Dispose' on the context instance, or wrapping it in a using statement. If you are using dependency injection, you should let the dependency injection container take care of disposing context instances.\r\nObject name: 'IotDbContext'.","Navigations":"threw System.ObjectDisposedException: Cannot access a disposed context instance. A common cause of this error is disposing a context instance that was resolved from dependency injection and then later trying to use the same context instance elsewhere in your application. This may occur if you are calling 'Dispose' on the context instance, or wrapping it in a using statement. If you are using dependency injection, you should let the dependency injection container take care of disposing context instances.\r\nObject name: 'IotDbContext'.","Properties":[null,null,null,null,null,null,null,null,null,null],"References":[],"Collections":"threw System.ObjectDisposedException: Cannot access a disposed context instance. A common cause of this error is disposing a context instance that was resolved from dependency injection and then later trying to use the same context instance elsewhere in your application. This may occur if you are calling 'Dispose' on the context instance, or wrapping it in a using statement. If you are using dependency injection, you should let the dependency injection container take care of disposing context instances.\r\nObject name: 'IotDbContext'.","IsKeySet":true,"CurrentValues":{},"OriginalValues":{},"DebugView":{}}},{"IsModified":false,"IsTemporary":false,"Metadata":{"$ref":"29"},"OriginalValue":"电梯","MemberEntry.Metadata":{"$ref":"29"},"CurrentValue":"电梯","EntityEntry":{"Entity":{},"State":"Added","Context":{},"Metadata":{},"Members":"threw System.ObjectDisposedException: Cannot access a disposed context instance. A common cause of this error is disposing a context instance that was resolved from dependency injection and then later trying to use the same context instance elsewhere in your application. This may occur if you are calling 'Dispose' on the context instance, or wrapping it in a using statement. If you are using dependency injection, you should let the dependency injection container take care of disposing context instances.\r\nObject name: 'IotDbContext'.","Navigations":"threw System.ObjectDisposedException: Cannot access a disposed context instance. A common cause of this error is disposing a context instance that was resolved from dependency injection and then later trying to use the same context instance elsewhere in your application. This may occur if you are calling 'Dispose' on the context instance, or wrapping it in a using statement. If you are using dependency injection, you should let the dependency injection container take care of disposing context instances.\r\nObject name: 'IotDbContext'.","Properties":[null,null,null,null,null,null,null,null,null,null],"References":[],"Collections":"threw System.ObjectDisposedException: Cannot access a disposed context instance. A common cause of this error is disposing a context instance that was resolved from dependency injection and then later trying to use the same context instance elsewhere in your application. This may occur if you are calling 'Dispose' on the context instance, or wrapping it in a using statement. If you are using dependency injection, you should let the dependency injection container take care of disposing context instances.\r\nObject name: 'IotDbContext'.","IsKeySet":true,"CurrentValues":{},"OriginalValues":{},"DebugView":{}}},{"IsModified":false,"IsTemporary":false,"Metadata":{"$ref":"31"},"OriginalValue":"MQTT","MemberEntry.Metadata":{"$ref":"31"},"CurrentValue":"MQTT","EntityEntry":{"Entity":{},"State":"Added","Context":{},"Metadata":{},"Members":"threw System.ObjectDisposedException: Cannot access a disposed context instance. A common cause of this error is disposing a context instance that was resolved from dependency injection and then later trying to use the same context instance elsewhere in your application. This may occur if you are calling 'Dispose' on the context instance, or wrapping it in a using statement. If you are using dependency injection, you should let the dependency injection container take care of disposing context instances.\r\nObject name: 'IotDbContext'.","Navigations":"threw System.ObjectDisposedException: Cannot access a disposed context instance. A common cause of this error is disposing a context instance that was resolved from dependency injection and then later trying to use the same context instance elsewhere in your application. This may occur if you are calling 'Dispose' on the context instance, or wrapping it in a using statement. If you are using dependency injection, you should let the dependency injection container take care of disposing context instances.\r\nObject name: 'IotDbContext'.","Properties":[null,null,null,null,null,null,null,null,null,null],"References":[],"Collections":"threw System.ObjectDisposedException: Cannot access a disposed context instance. A common cause of this error is disposing a context instance that was resolved from dependency injection and then later trying to use the same context instance elsewhere in your application. This may occur if you are calling 'Dispose' on the context instance, or wrapping it in a using statement. If you are using dependency injection, you should let the dependency injection container take care of disposing context instances.\r\nObject name: 'IotDbContext'.","IsKeySet":true,"CurrentValues":{},"OriginalValues":{},"DebugView":{}}},{"IsModified":false,"IsTemporary":false,"Metadata":{"$ref":"33"},"OriginalValue":"DirectDevice","MemberEntry.Metadata":{"$ref":"33"},"CurrentValue":"DirectDevice","EntityEntry":{"Entity":{},"State":"Added","Context":{},"Metadata":{},"Members":"threw System.ObjectDisposedException: Cannot access a disposed context instance. A common cause of this error is disposing a context instance that was resolved from dependency injection and then later trying to use the same context instance elsewhere in your application. This may occur if you are calling 'Dispose' on the context instance, or wrapping it in a using statement. If you are using dependency injection, you should let the dependency injection container take care of disposing context instances.\r\nObject name: 'IotDbContext'.","Navigations":"threw System.ObjectDisposedException: Cannot access a disposed context instance. A common cause of this error is disposing a context instance that was resolved from dependency injection and then later trying to use the same context instance elsewhere in your application. This may occur if you are calling 'Dispose' on the context instance, or wrapping it in a using statement. If you are using dependency injection, you should let the dependency injection container take care of disposing context instances.\r\nObject name: 'IotDbContext'.","Properties":[null,null,null,null,null,null,null,null,null,null],"References":[],"Collections":"threw System.ObjectDisposedException: Cannot access a disposed context instance. A common cause of this error is disposing a context instance that was resolved from dependency injection and then later trying to use the same context instance elsewhere in your application. This may occur if you are calling 'Dispose' on the context instance, or wrapping it in a using statement. If you are using dependency injection, you should let the dependency injection container take care of disposing context instances.\r\nObject name: 'IotDbContext'.","IsKeySet":true,"CurrentValues":{},"OriginalValues":{},"DebugView":{}}},{"IsModified":false,"IsTemporary":false,"Metadata":{"$ref":"35"},"OriginalValue":"ModbusRTU","MemberEntry.Metadata":{"$ref":"35"},"CurrentValue":"ModbusRTU","EntityEntry":{"Entity":{},"State":"Added","Context":{},"Metadata":{},"Members":"threw System.ObjectDisposedException: Cannot access a disposed context instance. A common cause of this error is disposing a context instance that was resolved from dependency injection and then later trying to use the same context instance elsewhere in your application. This may occur if you are calling 'Dispose' on the context instance, or wrapping it in a using statement. If you are using dependency injection, you should let the dependency injection container take care of disposing context instances.\r\nObject name: 'IotDbContext'.","Navigations":"threw System.ObjectDisposedException: Cannot access a disposed context instance. A common cause of this error is disposing a context instance that was resolved from dependency injection and then later trying to use the same context instance elsewhere in your application. This may occur if you are calling 'Dispose' on the context instance, or wrapping it in a using statement. If you are using dependency injection, you should let the dependency injection container take care of disposing context instances.\r\nObject name: 'IotDbContext'.","Properties":[null,null,null,null,null,null,null,null,null,null],"References":[],"Collections":"threw System.ObjectDisposedException: Cannot access a disposed context instance. A common cause of this error is disposing a context instance that was resolved from dependency injection and then later trying to use the same context instance elsewhere in your application. This may occur if you are calling 'Dispose' on the context instance, or wrapping it in a using statement. If you are using dependency injection, you should let the dependency injection container take care of disposing context instances.\r\nObject name: 'IotDbContext'.","IsKeySet":true,"CurrentValues":{},"OriginalValues":{},"DebugView":{}}},{"IsModified":false,"IsTemporary":false,"Metadata":{"$ref":"36"},"OriginalValue":"123qweasd","MemberEntry.Metadata":{"$ref":"36"},"CurrentValue":"123qweasd","EntityEntry":{"Entity":{},"State":"Added","Context":{},"Metadata":{},"Members":"threw System.ObjectDisposedException: Cannot access a disposed context instance. A common cause of this error is disposing a context instance that was resolved from dependency injection and then later trying to use the same context instance elsewhere in your application. This may occur if you are calling 'Dispose' on the context instance, or wrapping it in a using statement. If you are using dependency injection, you should let the dependency injection container take care of disposing context instances.\r\nObject name: 'IotDbContext'.","Navigations":"threw System.ObjectDisposedException: Cannot access a disposed context instance. A common cause of this error is disposing a context instance that was resolved from dependency injection and then later trying to use the same context instance elsewhere in your application. This may occur if you are calling 'Dispose' on the context instance, or wrapping it in a using statement. If you are using dependency injection, you should let the dependency injection container take care of disposing context instances.\r\nObject name: 'IotDbContext'.","Properties":[null,null,null,null,null,null,null,null,null,null],"References":[],"Collections":"threw System.ObjectDisposedException: Cannot access a disposed context instance. A common cause of this error is disposing a context instance that was resolved from dependency injection and then later trying to use the same context instance elsewhere in your application. This may occur if you are calling 'Dispose' on the context instance, or wrapping it in a using statement. If you are using dependency injection, you should let the dependency injection container take care of disposing context instances.\r\nObject name: 'IotDbContext'.","IsKeySet":true,"CurrentValues":{},"OriginalValues":{},"DebugView":{}}}],"References":[],"Collections":"threw System.ObjectDisposedException: Cannot access a disposed context instance. A common cause of this error is disposing a context instance that was resolved from dependency injection and then later trying to use the same context instance elsewhere in your application. This may occur if you are calling 'Dispose' on the context instance, or wrapping it in a using statement. If you are using dependency injection, you should let the dependency injection container take care of disposing context instances.\r\nObject name: 'IotDbContext'.","IsKeySet":true,"CurrentValues":{"Properties":[{"$ref":"2"},{"$ref":"23"},{"$ref":"25"},{"$ref":"26"},{"$ref":"28"},{"$ref":"29"},{"$ref":"31"},{"$ref":"33"},{"$ref":"35"},{"$ref":"36"}],"EntityType":{"$ref":"1"}},"OriginalValues":{"Properties":[{"$ref":"2"},{"$ref":"23"},{"$ref":"25"},{"$ref":"26"},{"$ref":"28"},{"$ref":"29"},{"$ref":"31"},{"$ref":"33"},{"$ref":"35"},{"$ref":"36"}],"EntityType":{"$ref":"1"}},"DebugView":{"LongView":"Product {Id: 1} Added\r\n  Id: 1 PK\r\n  Category: <null>\r\n  Code: 'ele'\r\n  DataFormat: <null>\r\n  DeviceCount: 1\r\n  Name: '电梯'\r\n  NetType: 'MQTT'\r\n  NodeType: 'DirectDevice'\r\n  ProtocolType: 'ModbusRTU'\r\n  Secret: '123qweasd'\r\n  Devices: [{Id: 1}]","ShortView":"Product {Id: 1} Added"}}},{"IsModified":false,"IsTemporary":false,"Metadata":{"$ref":"29"},"OriginalValue":"电梯","MemberEntry.Metadata":{"$ref":"29"},"CurrentValue":"电梯","EntityEntry":{"Entity":{"$ref":"20"},"State":"Added","Context":{"$ref":"21"},"Metadata":{"$ref":"1"},"Members":"threw System.ObjectDisposedException: Cannot access a disposed context instance. A common cause of this error is disposing a context instance that was resolved from dependency injection and then later trying to use the same context instance elsewhere in your application. This may occur if you are calling 'Dispose' on the context instance, or wrapping it in a using statement. If you are using dependency injection, you should let the dependency injection container take care of disposing context instances.\r\nObject name: 'IotDbContext'.","Navigations":"threw System.ObjectDisposedException: Cannot access a disposed context instance. A common cause of this error is disposing a context instance that was resolved from dependency injection and then later trying to use the same context instance elsewhere in your application. This may occur if you are calling 'Dispose' on the context instance, or wrapping it in a using statement. If you are using dependency injection, you should let the dependency injection container take care of disposing context instances.\r\nObject name: 'IotDbContext'.","Properties":[{"IsModified":false,"IsTemporary":false,"Metadata":{"$ref":"2"},"OriginalValue":1,"MemberEntry.Metadata":{"$ref":"2"},"CurrentValue":1,"EntityEntry":{"Entity":{},"State":"Added","Context":{},"Metadata":{},"Members":"threw System.ObjectDisposedException: Cannot access a disposed context instance. A common cause of this error is disposing a context instance that was resolved from dependency injection and then later trying to use the same context instance elsewhere in your application. This may occur if you are calling 'Dispose' on the context instance, or wrapping it in a using statement. If you are using dependency injection, you should let the dependency injection container take care of disposing context instances.\r\nObject name: 'IotDbContext'.","Navigations":"threw System.ObjectDisposedException: Cannot access a disposed context instance. A common cause of this error is disposing a context instance that was resolved from dependency injection and then later trying to use the same context instance elsewhere in your application. This may occur if you are calling 'Dispose' on the context instance, or wrapping it in a using statement. If you are using dependency injection, you should let the dependency injection container take care of disposing context instances.\r\nObject name: 'IotDbContext'.","Properties":[null,null,null,null,null,null,null,null,null,null],"References":[],"Collections":"threw System.ObjectDisposedException: Cannot access a disposed context instance. A common cause of this error is disposing a context instance that was resolved from dependency injection and then later trying to use the same context instance elsewhere in your application. This may occur if you are calling 'Dispose' on the context instance, or wrapping it in a using statement. If you are using dependency injection, you should let the dependency injection container take care of disposing context instances.\r\nObject name: 'IotDbContext'.","IsKeySet":true,"CurrentValues":{},"OriginalValues":{},"DebugView":{}}},{"IsModified":false,"IsTemporary":false,"Metadata":{"$ref":"23"},"OriginalValue":null,"MemberEntry.Metadata":{"$ref":"23"},"CurrentValue":null,"EntityEntry":{"Entity":{},"State":"Added","Context":{},"Metadata":{},"Members":"threw System.ObjectDisposedException: Cannot access a disposed context instance. A common cause of this error is disposing a context instance that was resolved from dependency injection and then later trying to use the same context instance elsewhere in your application. This may occur if you are calling 'Dispose' on the context instance, or wrapping it in a using statement. If you are using dependency injection, you should let the dependency injection container take care of disposing context instances.\r\nObject name: 'IotDbContext'.","Navigations":"threw System.ObjectDisposedException: Cannot access a disposed context instance. A common cause of this error is disposing a context instance that was resolved from dependency injection and then later trying to use the same context instance elsewhere in your application. This may occur if you are calling 'Dispose' on the context instance, or wrapping it in a using statement. If you are using dependency injection, you should let the dependency injection container take care of disposing context instances.\r\nObject name: 'IotDbContext'.","Properties":[null,null,null,null,null,null,null,null,null,null],"References":[],"Collections":"threw System.ObjectDisposedException: Cannot access a disposed context instance. A common cause of this error is disposing a context instance that was resolved from dependency injection and then later trying to use the same context instance elsewhere in your application. This may occur if you are calling 'Dispose' on the context instance, or wrapping it in a using statement. If you are using dependency injection, you should let the dependency injection container take care of disposing context instances.\r\nObject name: 'IotDbContext'.","IsKeySet":true,"CurrentValues":{},"OriginalValues":{},"DebugView":{}}},{"IsModified":false,"IsTemporary":false,"Metadata":{"$ref":"25"},"OriginalValue":"ele","MemberEntry.Metadata":{"$ref":"25"},"CurrentValue":"ele","EntityEntry":{"Entity":{},"State":"Added","Context":{},"Metadata":{},"Members":"threw System.ObjectDisposedException: Cannot access a disposed context instance. A common cause of this error is disposing a context instance that was resolved from dependency injection and then later trying to use the same context instance elsewhere in your application. This may occur if you are calling 'Dispose' on the context instance, or wrapping it in a using statement. If you are using dependency injection, you should let the dependency injection container take care of disposing context instances.\r\nObject name: 'IotDbContext'.","Navigations":"threw System.ObjectDisposedException: Cannot access a disposed context instance. A common cause of this error is disposing a context instance that was resolved from dependency injection and then later trying to use the same context instance elsewhere in your application. This may occur if you are calling 'Dispose' on the context instance, or wrapping it in a using statement. If you are using dependency injection, you should let the dependency injection container take care of disposing context instances.\r\nObject name: 'IotDbContext'.","Properties":[null,null,null,null,null,null,null,null,null,null],"References":[],"Collections":"threw System.ObjectDisposedException: Cannot access a disposed context instance. A common cause of this error is disposing a context instance that was resolved from dependency injection and then later trying to use the same context instance elsewhere in your application. This may occur if you are calling 'Dispose' on the context instance, or wrapping it in a using statement. If you are using dependency injection, you should let the dependency injection container take care of disposing context instances.\r\nObject name: 'IotDbContext'.","IsKeySet":true,"CurrentValues":{},"OriginalValues":{},"DebugView":{}}},{"IsModified":false,"IsTemporary":false,"Metadata":{"$ref":"26"},"OriginalValue":null,"MemberEntry.Metadata":{"$ref":"26"},"CurrentValue":null,"EntityEntry":{"Entity":{},"State":"Added","Context":{},"Metadata":{},"Members":"threw System.ObjectDisposedException: Cannot access a disposed context instance. A common cause of this error is disposing a context instance that was resolved from dependency injection and then later trying to use the same context instance elsewhere in your application. This may occur if you are calling 'Dispose' on the context instance, or wrapping it in a using statement. If you are using dependency injection, you should let the dependency injection container take care of disposing context instances.\r\nObject name: 'IotDbContext'.","Navigations":"threw System.ObjectDisposedException: Cannot access a disposed context instance. A common cause of this error is disposing a context instance that was resolved from dependency injection and then later trying to use the same context instance elsewhere in your application. This may occur if you are calling 'Dispose' on the context instance, or wrapping it in a using statement. If you are using dependency injection, you should let the dependency injection container take care of disposing context instances.\r\nObject name: 'IotDbContext'.","Properties":[null,null,null,null,null,null,null,null,null,null],"References":[],"Collections":"threw System.ObjectDisposedException: Cannot access a disposed context instance. A common cause of this error is disposing a context instance that was resolved from dependency injection and then later trying to use the same context instance elsewhere in your application. This may occur if you are calling 'Dispose' on the context instance, or wrapping it in a using statement. If you are using dependency injection, you should let the dependency injection container take care of disposing context instances.\r\nObject name: 'IotDbContext'.","IsKeySet":true,"CurrentValues":{},"OriginalValues":{},"DebugView":{}}},{"IsModified":false,"IsTemporary":false,"Metadata":{"$ref":"28"},"OriginalValue":1,"MemberEntry.Metadata":{"$ref":"28"},"CurrentValue":1,"EntityEntry":{"Entity":{},"State":"Added","Context":{},"Metadata":{},"Members":"threw System.ObjectDisposedException: Cannot access a disposed context instance. A common cause of this error is disposing a context instance that was resolved from dependency injection and then later trying to use the same context instance elsewhere in your application. This may occur if you are calling 'Dispose' on the context instance, or wrapping it in a using statement. If you are using dependency injection, you should let the dependency injection container take care of disposing context instances.\r\nObject name: 'IotDbContext'.","Navigations":"threw System.ObjectDisposedException: Cannot access a disposed context instance. A common cause of this error is disposing a context instance that was resolved from dependency injection and then later trying to use the same context instance elsewhere in your application. This may occur if you are calling 'Dispose' on the context instance, or wrapping it in a using statement. If you are using dependency injection, you should let the dependency injection container take care of disposing context instances.\r\nObject name: 'IotDbContext'.","Properties":[null,null,null,null,null,null,null,null,null,null],"References":[],"Collections":"threw System.ObjectDisposedException: Cannot access a disposed context instance. A common cause of this error is disposing a context instance that was resolved from dependency injection and then later trying to use the same context instance elsewhere in your application. This may occur if you are calling 'Dispose' on the context instance, or wrapping it in a using statement. If you are using dependency injection, you should let the dependency injection container take care of disposing context instances.\r\nObject name: 'IotDbContext'.","IsKeySet":true,"CurrentValues":{},"OriginalValues":{},"DebugView":{}}},{"IsModified":false,"IsTemporary":false,"Metadata":{"$ref":"29"},"OriginalValue":"电梯","MemberEntry.Metadata":{"$ref":"29"},"CurrentValue":"电梯","EntityEntry":{"Entity":{},"State":"Added","Context":{},"Metadata":{},"Members":"threw System.ObjectDisposedException: Cannot access a disposed context instance. A common cause of this error is disposing a context instance that was resolved from dependency injection and then later trying to use the same context instance elsewhere in your application. This may occur if you are calling 'Dispose' on the context instance, or wrapping it in a using statement. If you are using dependency injection, you should let the dependency injection container take care of disposing context instances.\r\nObject name: 'IotDbContext'.","Navigations":"threw System.ObjectDisposedException: Cannot access a disposed context instance. A common cause of this error is disposing a context instance that was resolved from dependency injection and then later trying to use the same context instance elsewhere in your application. This may occur if you are calling 'Dispose' on the context instance, or wrapping it in a using statement. If you are using dependency injection, you should let the dependency injection container take care of disposing context instances.\r\nObject name: 'IotDbContext'.","Properties":[null,null,null,null,null,null,null,null,null,null],"References":[],"Collections":"threw System.ObjectDisposedException: Cannot access a disposed context instance. A common cause of this error is disposing a context instance that was resolved from dependency injection and then later trying to use the same context instance elsewhere in your application. This may occur if you are calling 'Dispose' on the context instance, or wrapping it in a using statement. If you are using dependency injection, you should let the dependency injection container take care of disposing context instances.\r\nObject name: 'IotDbContext'.","IsKeySet":true,"CurrentValues":{},"OriginalValues":{},"DebugView":{}}},{"IsModified":false,"IsTemporary":false,"Metadata":{"$ref":"31"},"OriginalValue":"MQTT","MemberEntry.Metadata":{"$ref":"31"},"CurrentValue":"MQTT","EntityEntry":{"Entity":{},"State":"Added","Context":{},"Metadata":{},"Members":"threw System.ObjectDisposedException: Cannot access a disposed context instance. A common cause of this error is disposing a context instance that was resolved from dependency injection and then later trying to use the same context instance elsewhere in your application. This may occur if you are calling 'Dispose' on the context instance, or wrapping it in a using statement. If you are using dependency injection, you should let the dependency injection container take care of disposing context instances.\r\nObject name: 'IotDbContext'.","Navigations":"threw System.ObjectDisposedException: Cannot access a disposed context instance. A common cause of this error is disposing a context instance that was resolved from dependency injection and then later trying to use the same context instance elsewhere in your application. This may occur if you are calling 'Dispose' on the context instance, or wrapping it in a using statement. If you are using dependency injection, you should let the dependency injection container take care of disposing context instances.\r\nObject name: 'IotDbContext'.","Properties":[null,null,null,null,null,null,null,null,null,null],"References":[],"Collections":"threw System.ObjectDisposedException: Cannot access a disposed context instance. A common cause of this error is disposing a context instance that was resolved from dependency injection and then later trying to use the same context instance elsewhere in your application. This may occur if you are calling 'Dispose' on the context instance, or wrapping it in a using statement. If you are using dependency injection, you should let the dependency injection container take care of disposing context instances.\r\nObject name: 'IotDbContext'.","IsKeySet":true,"CurrentValues":{},"OriginalValues":{},"DebugView":{}}},{"IsModified":false,"IsTemporary":false,"Metadata":{"$ref":"33"},"OriginalValue":"DirectDevice","MemberEntry.Metadata":{"$ref":"33"},"CurrentValue":"DirectDevice","EntityEntry":{"Entity":{},"State":"Added","Context":{},"Metadata":{},"Members":"threw System.ObjectDisposedException: Cannot access a disposed context instance. A common cause of this error is disposing a context instance that was resolved from dependency injection and then later trying to use the same context instance elsewhere in your application. This may occur if you are calling 'Dispose' on the context instance, or wrapping it in a using statement. If you are using dependency injection, you should let the dependency injection container take care of disposing context instances.\r\nObject name: 'IotDbContext'.","Navigations":"threw System.ObjectDisposedException: Cannot access a disposed context instance. A common cause of this error is disposing a context instance that was resolved from dependency injection and then later trying to use the same context instance elsewhere in your application. This may occur if you are calling 'Dispose' on the context instance, or wrapping it in a using statement. If you are using dependency injection, you should let the dependency injection container take care of disposing context instances.\r\nObject name: 'IotDbContext'.","Properties":[null,null,null,null,null,null,null,null,null,null],"References":[],"Collections":"threw System.ObjectDisposedException: Cannot access a disposed context instance. A common cause of this error is disposing a context instance that was resolved from dependency injection and then later trying to use the same context instance elsewhere in your application. This may occur if you are calling 'Dispose' on the context instance, or wrapping it in a using statement. If you are using dependency injection, you should let the dependency injection container take care of disposing context instances.\r\nObject name: 'IotDbContext'.","IsKeySet":true,"CurrentValues":{},"OriginalValues":{},"DebugView":{}}},{"IsModified":false,"IsTemporary":false,"Metadata":{"$ref":"35"},"OriginalValue":"ModbusRTU","MemberEntry.Metadata":{"$ref":"35"},"CurrentValue":"ModbusRTU","EntityEntry":{"Entity":{},"State":"Added","Context":{},"Metadata":{},"Members":"threw System.ObjectDisposedException: Cannot access a disposed context instance. A common cause of this error is disposing a context instance that was resolved from dependency injection and then later trying to use the same context instance elsewhere in your application. This may occur if you are calling 'Dispose' on the context instance, or wrapping it in a using statement. If you are using dependency injection, you should let the dependency injection container take care of disposing context instances.\r\nObject name: 'IotDbContext'.","Navigations":"threw System.ObjectDisposedException: Cannot access a disposed context instance. A common cause of this error is disposing a context instance that was resolved from dependency injection and then later trying to use the same context instance elsewhere in your application. This may occur if you are calling 'Dispose' on the context instance, or wrapping it in a using statement. If you are using dependency injection, you should let the dependency injection container take care of disposing context instances.\r\nObject name: 'IotDbContext'.","Properties":[null,null,null,null,null,null,null,null,null,null],"References":[],"Collections":"threw System.ObjectDisposedException: Cannot access a disposed context instance. A common cause of this error is disposing a context instance that was resolved from dependency injection and then later trying to use the same context instance elsewhere in your application. This may occur if you are calling 'Dispose' on the context instance, or wrapping it in a using statement. If you are using dependency injection, you should let the dependency injection container take care of disposing context instances.\r\nObject name: 'IotDbContext'.","IsKeySet":true,"CurrentValues":{},"OriginalValues":{},"DebugView":{}}},{"IsModified":false,"IsTemporary":false,"Metadata":{"$ref":"36"},"OriginalValue":"123qweasd","MemberEntry.Metadata":{"$ref":"36"},"CurrentValue":"123qweasd","EntityEntry":{"Entity":{},"State":"Added","Context":{},"Metadata":{},"Members":"threw System.ObjectDisposedException: Cannot access a disposed context instance. A common cause of this error is disposing a context instance that was resolved from dependency injection and then later trying to use the same context instance elsewhere in your application. This may occur if you are calling 'Dispose' on the context instance, or wrapping it in a using statement. If you are using dependency injection, you should let the dependency injection container take care of disposing context instances.\r\nObject name: 'IotDbContext'.","Navigations":"threw System.ObjectDisposedException: Cannot access a disposed context instance. A common cause of this error is disposing a context instance that was resolved from dependency injection and then later trying to use the same context instance elsewhere in your application. This may occur if you are calling 'Dispose' on the context instance, or wrapping it in a using statement. If you are using dependency injection, you should let the dependency injection container take care of disposing context instances.\r\nObject name: 'IotDbContext'.","Properties":[null,null,null,null,null,null,null,null,null,null],"References":[],"Collections":"threw System.ObjectDisposedException: Cannot access a disposed context instance. A common cause of this error is disposing a context instance that was resolved from dependency injection and then later trying to use the same context instance elsewhere in your application. This may occur if you are calling 'Dispose' on the context instance, or wrapping it in a using statement. If you are using dependency injection, you should let the dependency injection container take care of disposing context instances.\r\nObject name: 'IotDbContext'.","IsKeySet":true,"CurrentValues":{},"OriginalValues":{},"DebugView":{}}}],"References":[],"Collections":"threw System.ObjectDisposedException: Cannot access a disposed context instance. A common cause of this error is disposing a context instance that was resolved from dependency injection and then later trying to use the same context instance elsewhere in your application. This may occur if you are calling 'Dispose' on the context instance, or wrapping it in a using statement. If you are using dependency injection, you should let the dependency injection container take care of disposing context instances.\r\nObject name: 'IotDbContext'.","IsKeySet":true,"CurrentValues":{"Properties":[{"$ref":"2"},{"$ref":"23"},{"$ref":"25"},{"$ref":"26"},{"$ref":"28"},{"$ref":"29"},{"$ref":"31"},{"$ref":"33"},{"$ref":"35"},{"$ref":"36"}],"EntityType":{"$ref":"1"}},"OriginalValues":{"Properties":[{"$ref":"2"},{"$ref":"23"},{"$ref":"25"},{"$ref":"26"},{"$ref":"28"},{"$ref":"29"},{"$ref":"31"},{"$ref":"33"},{"$ref":"35"},{"$ref":"36"}],"EntityType":{"$ref":"1"}},"DebugView":{"LongView":"Product {Id: 1} Added\r\n  Id: 1 PK\r\n  Category: <null>\r\n  Code: 'ele'\r\n  DataFormat: <null>\r\n  DeviceCount: 1\r\n  Name: '电梯'\r\n  NetType: 'MQTT'\r\n  NodeType: 'DirectDevice'\r\n  ProtocolType: 'ModbusRTU'\r\n  Secret: '123qweasd'\r\n  Devices: [{Id: 1}]","ShortView":"Product {Id: 1} Added"}}},{"IsModified":false,"IsTemporary":false,"Metadata":{"$ref":"31"},"OriginalValue":"MQTT","MemberEntry.Metadata":{"$ref":"31"},"CurrentValue":"MQTT","EntityEntry":{"Entity":{"$ref":"20"},"State":"Added","Context":{"$ref":"21"},"Metadata":{"$ref":"1"},"Members":"threw System.ObjectDisposedException: Cannot access a disposed context instance. A common cause of this error is disposing a context instance that was resolved from dependency injection and then later trying to use the same context instance elsewhere in your application. This may occur if you are calling 'Dispose' on the context instance, or wrapping it in a using statement. If you are using dependency injection, you should let the dependency injection container take care of disposing context instances.\r\nObject name: 'IotDbContext'.","Navigations":"threw System.ObjectDisposedException: Cannot access a disposed context instance. A common cause of this error is disposing a context instance that was resolved from dependency injection and then later trying to use the same context instance elsewhere in your application. This may occur if you are calling 'Dispose' on the context instance, or wrapping it in a using statement. If you are using dependency injection, you should let the dependency injection container take care of disposing context instances.\r\nObject name: 'IotDbContext'.","Properties":[{"IsModified":false,"IsTemporary":false,"Metadata":{"$ref":"2"},"OriginalValue":1,"MemberEntry.Metadata":{"$ref":"2"},"CurrentValue":1,"EntityEntry":{"Entity":{},"State":"Added","Context":{},"Metadata":{},"Members":"threw System.ObjectDisposedException: Cannot access a disposed context instance. A common cause of this error is disposing a context instance that was resolved from dependency injection and then later trying to use the same context instance elsewhere in your application. This may occur if you are calling 'Dispose' on the context instance, or wrapping it in a using statement. If you are using dependency injection, you should let the dependency injection container take care of disposing context instances.\r\nObject name: 'IotDbContext'.","Navigations":"threw System.ObjectDisposedException: Cannot access a disposed context instance. A common cause of this error is disposing a context instance that was resolved from dependency injection and then later trying to use the same context instance elsewhere in your application. This may occur if you are calling 'Dispose' on the context instance, or wrapping it in a using statement. If you are using dependency injection, you should let the dependency injection container take care of disposing context instances.\r\nObject name: 'IotDbContext'.","Properties":[null,null,null,null,null,null,null,null,null,null],"References":[],"Collections":"threw System.ObjectDisposedException: Cannot access a disposed context instance. A common cause of this error is disposing a context instance that was resolved from dependency injection and then later trying to use the same context instance elsewhere in your application. This may occur if you are calling 'Dispose' on the context instance, or wrapping it in a using statement. If you are using dependency injection, you should let the dependency injection container take care of disposing context instances.\r\nObject name: 'IotDbContext'.","IsKeySet":true,"CurrentValues":{},"OriginalValues":{},"DebugView":{}}},{"IsModified":false,"IsTemporary":false,"Metadata":{"$ref":"23"},"OriginalValue":null,"MemberEntry.Metadata":{"$ref":"23"},"CurrentValue":null,"EntityEntry":{"Entity":{},"State":"Added","Context":{},"Metadata":{},"Members":"threw System.ObjectDisposedException: Cannot access a disposed context instance. A common cause of this error is disposing a context instance that was resolved from dependency injection and then later trying to use the same context instance elsewhere in your application. This may occur if you are calling 'Dispose' on the context instance, or wrapping it in a using statement. If you are using dependency injection, you should let the dependency injection container take care of disposing context instances.\r\nObject name: 'IotDbContext'.","Navigations":"threw System.ObjectDisposedException: Cannot access a disposed context instance. A common cause of this error is disposing a context instance that was resolved from dependency injection and then later trying to use the same context instance elsewhere in your application. This may occur if you are calling 'Dispose' on the context instance, or wrapping it in a using statement. If you are using dependency injection, you should let the dependency injection container take care of disposing context instances.\r\nObject name: 'IotDbContext'.","Properties":[null,null,null,null,null,null,null,null,null,null],"References":[],"Collections":"threw System.ObjectDisposedException: Cannot access a disposed context instance. A common cause of this error is disposing a context instance that was resolved from dependency injection and then later trying to use the same context instance elsewhere in your application. This may occur if you are calling 'Dispose' on the context instance, or wrapping it in a using statement. If you are using dependency injection, you should let the dependency injection container take care of disposing context instances.\r\nObject name: 'IotDbContext'.","IsKeySet":true,"CurrentValues":{},"OriginalValues":{},"DebugView":{}}},{"IsModified":false,"IsTemporary":false,"Metadata":{"$ref":"25"},"OriginalValue":"ele","MemberEntry.Metadata":{"$ref":"25"},"CurrentValue":"ele","EntityEntry":{"Entity":{},"State":"Added","Context":{},"Metadata":{},"Members":"threw System.ObjectDisposedException: Cannot access a disposed context instance. A common cause of this error is disposing a context instance that was resolved from dependency injection and then later trying to use the same context instance elsewhere in your application. This may occur if you are calling 'Dispose' on the context instance, or wrapping it in a using statement. If you are using dependency injection, you should let the dependency injection container take care of disposing context instances.\r\nObject name: 'IotDbContext'.","Navigations":"threw System.ObjectDisposedException: Cannot access a disposed context instance. A common cause of this error is disposing a context instance that was resolved from dependency injection and then later trying to use the same context instance elsewhere in your application. This may occur if you are calling 'Dispose' on the context instance, or wrapping it in a using statement. If you are using dependency injection, you should let the dependency injection container take care of disposing context instances.\r\nObject name: 'IotDbContext'.","Properties":[null,null,null,null,null,null,null,null,null,null],"References":[],"Collections":"threw System.ObjectDisposedException: Cannot access a disposed context instance. A common cause of this error is disposing a context instance that was resolved from dependency injection and then later trying to use the same context instance elsewhere in your application. This may occur if you are calling 'Dispose' on the context instance, or wrapping it in a using statement. If you are using dependency injection, you should let the dependency injection container take care of disposing context instances.\r\nObject name: 'IotDbContext'.","IsKeySet":true,"CurrentValues":{},"OriginalValues":{},"DebugView":{}}},{"IsModified":false,"IsTemporary":false,"Metadata":{"$ref":"26"},"OriginalValue":null,"MemberEntry.Metadata":{"$ref":"26"},"CurrentValue":null,"EntityEntry":{"Entity":{},"State":"Added","Context":{},"Metadata":{},"Members":"threw System.ObjectDisposedException: Cannot access a disposed context instance. A common cause of this error is disposing a context instance that was resolved from dependency injection and then later trying to use the same context instance elsewhere in your application. This may occur if you are calling 'Dispose' on the context instance, or wrapping it in a using statement. If you are using dependency injection, you should let the dependency injection container take care of disposing context instances.\r\nObject name: 'IotDbContext'.","Navigations":"threw System.ObjectDisposedException: Cannot access a disposed context instance. A common cause of this error is disposing a context instance that was resolved from dependency injection and then later trying to use the same context instance elsewhere in your application. This may occur if you are calling 'Dispose' on the context instance, or wrapping it in a using statement. If you are using dependency injection, you should let the dependency injection container take care of disposing context instances.\r\nObject name: 'IotDbContext'.","Properties":[null,null,null,null,null,null,null,null,null,null],"References":[],"Collections":"threw System.ObjectDisposedException: Cannot access a disposed context instance. A common cause of this error is disposing a context instance that was resolved from dependency injection and then later trying to use the same context instance elsewhere in your application. This may occur if you are calling 'Dispose' on the context instance, or wrapping it in a using statement. If you are using dependency injection, you should let the dependency injection container take care of disposing context instances.\r\nObject name: 'IotDbContext'.","IsKeySet":true,"CurrentValues":{},"OriginalValues":{},"DebugView":{}}},{"IsModified":false,"IsTemporary":false,"Metadata":{"$ref":"28"},"OriginalValue":1,"MemberEntry.Metadata":{"$ref":"28"},"CurrentValue":1,"EntityEntry":{"Entity":{},"State":"Added","Context":{},"Metadata":{},"Members":"threw System.ObjectDisposedException: Cannot access a disposed context instance. A common cause of this error is disposing a context instance that was resolved from dependency injection and then later trying to use the same context instance elsewhere in your application. This may occur if you are calling 'Dispose' on the context instance, or wrapping it in a using statement. If you are using dependency injection, you should let the dependency injection container take care of disposing context instances.\r\nObject name: 'IotDbContext'.","Navigations":"threw System.ObjectDisposedException: Cannot access a disposed context instance. A common cause of this error is disposing a context instance that was resolved from dependency injection and then later trying to use the same context instance elsewhere in your application. This may occur if you are calling 'Dispose' on the context instance, or wrapping it in a using statement. If you are using dependency injection, you should let the dependency injection container take care of disposing context instances.\r\nObject name: 'IotDbContext'.","Properties":[null,null,null,null,null,null,null,null,null,null],"References":[],"Collections":"threw System.ObjectDisposedException: Cannot access a disposed context instance. A common cause of this error is disposing a context instance that was resolved from dependency injection and then later trying to use the same context instance elsewhere in your application. This may occur if you are calling 'Dispose' on the context instance, or wrapping it in a using statement. If you are using dependency injection, you should let the dependency injection container take care of disposing context instances.\r\nObject name: 'IotDbContext'.","IsKeySet":true,"CurrentValues":{},"OriginalValues":{},"DebugView":{}}},{"IsModified":false,"IsTemporary":false,"Metadata":{"$ref":"29"},"OriginalValue":"电梯","MemberEntry.Metadata":{"$ref":"29"},"CurrentValue":"电梯","EntityEntry":{"Entity":{},"State":"Added","Context":{},"Metadata":{},"Members":"threw System.ObjectDisposedException: Cannot access a disposed context instance. A common cause of this error is disposing a context instance that was resolved from dependency injection and then later trying to use the same context instance elsewhere in your application. This may occur if you are calling 'Dispose' on the context instance, or wrapping it in a using statement. If you are using dependency injection, you should let the dependency injection container take care of disposing context instances.\r\nObject name: 'IotDbContext'.","Navigations":"threw System.ObjectDisposedException: Cannot access a disposed context instance. A common cause of this error is disposing a context instance that was resolved from dependency injection and then later trying to use the same context instance elsewhere in your application. This may occur if you are calling 'Dispose' on the context instance, or wrapping it in a using statement. If you are using dependency injection, you should let the dependency injection container take care of disposing context instances.\r\nObject name: 'IotDbContext'.","Properties":[null,null,null,null,null,null,null,null,null,null],"References":[],"Collections":"threw System.ObjectDisposedException: Cannot access a disposed context instance. A common cause of this error is disposing a context instance that was resolved from dependency injection and then later trying to use the same context instance elsewhere in your application. This may occur if you are calling 'Dispose' on the context instance, or wrapping it in a using statement. If you are using dependency injection, you should let the dependency injection container take care of disposing context instances.\r\nObject name: 'IotDbContext'.","IsKeySet":true,"CurrentValues":{},"OriginalValues":{},"DebugView":{}}},{"IsModified":false,"IsTemporary":false,"Metadata":{"$ref":"31"},"OriginalValue":"MQTT","MemberEntry.Metadata":{"$ref":"31"},"CurrentValue":"MQTT","EntityEntry":{"Entity":{},"State":"Added","Context":{},"Metadata":{},"Members":"threw System.ObjectDisposedException: Cannot access a disposed context instance. A common cause of this error is disposing a context instance that was resolved from dependency injection and then later trying to use the same context instance elsewhere in your application. This may occur if you are calling 'Dispose' on the context instance, or wrapping it in a using statement. If you are using dependency injection, you should let the dependency injection container take care of disposing context instances.\r\nObject name: 'IotDbContext'.","Navigations":"threw System.ObjectDisposedException: Cannot access a disposed context instance. A common cause of this error is disposing a context instance that was resolved from dependency injection and then later trying to use the same context instance elsewhere in your application. This may occur if you are calling 'Dispose' on the context instance, or wrapping it in a using statement. If you are using dependency injection, you should let the dependency injection container take care of disposing context instances.\r\nObject name: 'IotDbContext'.","Properties":[null,null,null,null,null,null,null,null,null,null],"References":[],"Collections":"threw System.ObjectDisposedException: Cannot access a disposed context instance. A common cause of this error is disposing a context instance that was resolved from dependency injection and then later trying to use the same context instance elsewhere in your application. This may occur if you are calling 'Dispose' on the context instance, or wrapping it in a using statement. If you are using dependency injection, you should let the dependency injection container take care of disposing context instances.\r\nObject name: 'IotDbContext'.","IsKeySet":true,"CurrentValues":{},"OriginalValues":{},"DebugView":{}}},{"IsModified":false,"IsTemporary":false,"Metadata":{"$ref":"33"},"OriginalValue":"DirectDevice","MemberEntry.Metadata":{"$ref":"33"},"CurrentValue":"DirectDevice","EntityEntry":{"Entity":{},"State":"Added","Context":{},"Metadata":{},"Members":"threw System.ObjectDisposedException: Cannot access a disposed context instance. A common cause of this error is disposing a context instance that was resolved from dependency injection and then later trying to use the same context instance elsewhere in your application. This may occur if you are calling 'Dispose' on the context instance, or wrapping it in a using statement. If you are using dependency injection, you should let the dependency injection container take care of disposing context instances.\r\nObject name: 'IotDbContext'.","Navigations":"threw System.ObjectDisposedException: Cannot access a disposed context instance. A common cause of this error is disposing a context instance that was resolved from dependency injection and then later trying to use the same context instance elsewhere in your application. This may occur if you are calling 'Dispose' on the context instance, or wrapping it in a using statement. If you are using dependency injection, you should let the dependency injection container take care of disposing context instances.\r\nObject name: 'IotDbContext'.","Properties":[null,null,null,null,null,null,null,null,null,null],"References":[],"Collections":"threw System.ObjectDisposedException: Cannot access a disposed context instance. A common cause of this error is disposing a context instance that was resolved from dependency injection and then later trying to use the same context instance elsewhere in your application. This may occur if you are calling 'Dispose' on the context instance, or wrapping it in a using statement. If you are using dependency injection, you should let the dependency injection container take care of disposing context instances.\r\nObject name: 'IotDbContext'.","IsKeySet":true,"CurrentValues":{},"OriginalValues":{},"DebugView":{}}},{"IsModified":false,"IsTemporary":false,"Metadata":{"$ref":"35"},"OriginalValue":"ModbusRTU","MemberEntry.Metadata":{"$ref":"35"},"CurrentValue":"ModbusRTU","EntityEntry":{"Entity":{},"State":"Added","Context":{},"Metadata":{},"Members":"threw System.ObjectDisposedException: Cannot access a disposed context instance. A common cause of this error is disposing a context instance that was resolved from dependency injection and then later trying to use the same context instance elsewhere in your application. This may occur if you are calling 'Dispose' on the context instance, or wrapping it in a using statement. If you are using dependency injection, you should let the dependency injection container take care of disposing context instances.\r\nObject name: 'IotDbContext'.","Navigations":"threw System.ObjectDisposedException: Cannot access a disposed context instance. A common cause of this error is disposing a context instance that was resolved from dependency injection and then later trying to use the same context instance elsewhere in your application. This may occur if you are calling 'Dispose' on the context instance, or wrapping it in a using statement. If you are using dependency injection, you should let the dependency injection container take care of disposing context instances.\r\nObject name: 'IotDbContext'.","Properties":[null,null,null,null,null,null,null,null,null,null],"References":[],"Collections":"threw System.ObjectDisposedException: Cannot access a disposed context instance. A common cause of this error is disposing a context instance that was resolved from dependency injection and then later trying to use the same context instance elsewhere in your application. This may occur if you are calling 'Dispose' on the context instance, or wrapping it in a using statement. If you are using dependency injection, you should let the dependency injection container take care of disposing context instances.\r\nObject name: 'IotDbContext'.","IsKeySet":true,"CurrentValues":{},"OriginalValues":{},"DebugView":{}}},{"IsModified":false,"IsTemporary":false,"Metadata":{"$ref":"36"},"OriginalValue":"123qweasd","MemberEntry.Metadata":{"$ref":"36"},"CurrentValue":"123qweasd","EntityEntry":{"Entity":{},"State":"Added","Context":{},"Metadata":{},"Members":"threw System.ObjectDisposedException: Cannot access a disposed context instance. A common cause of this error is disposing a context instance that was resolved from dependency injection and then later trying to use the same context instance elsewhere in your application. This may occur if you are calling 'Dispose' on the context instance, or wrapping it in a using statement. If you are using dependency injection, you should let the dependency injection container take care of disposing context instances.\r\nObject name: 'IotDbContext'.","Navigations":"threw System.ObjectDisposedException: Cannot access a disposed context instance. A common cause of this error is disposing a context instance that was resolved from dependency injection and then later trying to use the same context instance elsewhere in your application. This may occur if you are calling 'Dispose' on the context instance, or wrapping it in a using statement. If you are using dependency injection, you should let the dependency injection container take care of disposing context instances.\r\nObject name: 'IotDbContext'.","Properties":[null,null,null,null,null,null,null,null,null,null],"References":[],"Collections":"threw System.ObjectDisposedException: Cannot access a disposed context instance. A common cause of this error is disposing a context instance that was resolved from dependency injection and then later trying to use the same context instance elsewhere in your application. This may occur if you are calling 'Dispose' on the context instance, or wrapping it in a using statement. If you are using dependency injection, you should let the dependency injection container take care of disposing context instances.\r\nObject name: 'IotDbContext'.","IsKeySet":true,"CurrentValues":{},"OriginalValues":{},"DebugView":{}}}],"References":[],"Collections":"threw System.ObjectDisposedException: Cannot access a disposed context instance. A common cause of this error is disposing a context instance that was resolved from dependency injection and then later trying to use the same context instance elsewhere in your application. This may occur if you are calling 'Dispose' on the context instance, or wrapping it in a using statement. If you are using dependency injection, you should let the dependency injection container take care of disposing context instances.\r\nObject name: 'IotDbContext'.","IsKeySet":true,"CurrentValues":{"Properties":[{"$ref":"2"},{"$ref":"23"},{"$ref":"25"},{"$ref":"26"},{"$ref":"28"},{"$ref":"29"},{"$ref":"31"},{"$ref":"33"},{"$ref":"35"},{"$ref":"36"}],"EntityType":{"$ref":"1"}},"OriginalValues":{"Properties":[{"$ref":"2"},{"$ref":"23"},{"$ref":"25"},{"$ref":"26"},{"$ref":"28"},{"$ref":"29"},{"$ref":"31"},{"$ref":"33"},{"$ref":"35"},{"$ref":"36"}],"EntityType":{"$ref":"1"}},"DebugView":{"LongView":"Product {Id: 1} Added\r\n  Id: 1 PK\r\n  Category: <null>\r\n  Code: 'ele'\r\n  DataFormat: <null>\r\n  DeviceCount: 1\r\n  Name: '电梯'\r\n  NetType: 'MQTT'\r\n  NodeType: 'DirectDevice'\r\n  ProtocolType: 'ModbusRTU'\r\n  Secret: '123qweasd'\r\n  Devices: [{Id: 1}]","ShortView":"Product {Id: 1} Added"}}},{"IsModified":false,"IsTemporary":false,"Metadata":{"$ref":"33"},"OriginalValue":"DirectDevice","MemberEntry.Metadata":{"$ref":"33"},"CurrentValue":"DirectDevice","EntityEntry":{"Entity":{"$ref":"20"},"State":"Added","Context":{"$ref":"21"},"Metadata":{"$ref":"1"},"Members":"threw System.ObjectDisposedException: Cannot access a disposed context instance. A common cause of this error is disposing a context instance that was resolved from dependency injection and then later trying to use the same context instance elsewhere in your application. This may occur if you are calling 'Dispose' on the context instance, or wrapping it in a using statement. If you are using dependency injection, you should let the dependency injection container take care of disposing context instances.\r\nObject name: 'IotDbContext'.","Navigations":"threw System.ObjectDisposedException: Cannot access a disposed context instance. A common cause of this error is disposing a context instance that was resolved from dependency injection and then later trying to use the same context instance elsewhere in your application. This may occur if you are calling 'Dispose' on the context instance, or wrapping it in a using statement. If you are using dependency injection, you should let the dependency injection container take care of disposing context instances.\r\nObject name: 'IotDbContext'.","Properties":[{"IsModified":false,"IsTemporary":false,"Metadata":{"$ref":"2"},"OriginalValue":1,"MemberEntry.Metadata":{"$ref":"2"},"CurrentValue":1,"EntityEntry":{"Entity":{},"State":"Added","Context":{},"Metadata":{},"Members":"threw System.ObjectDisposedException: Cannot access a disposed context instance. A common cause of this error is disposing a context instance that was resolved from dependency injection and then later trying to use the same context instance elsewhere in your application. This may occur if you are calling 'Dispose' on the context instance, or wrapping it in a using statement. If you are using dependency injection, you should let the dependency injection container take care of disposing context instances.\r\nObject name: 'IotDbContext'.","Navigations":"threw System.ObjectDisposedException: Cannot access a disposed context instance. A common cause of this error is disposing a context instance that was resolved from dependency injection and then later trying to use the same context instance elsewhere in your application. This may occur if you are calling 'Dispose' on the context instance, or wrapping it in a using statement. If you are using dependency injection, you should let the dependency injection container take care of disposing context instances.\r\nObject name: 'IotDbContext'.","Properties":[null,null,null,null,null,null,null,null,null,null],"References":[],"Collections":"threw System.ObjectDisposedException: Cannot access a disposed context instance. A common cause of this error is disposing a context instance that was resolved from dependency injection and then later trying to use the same context instance elsewhere in your application. This may occur if you are calling 'Dispose' on the context instance, or wrapping it in a using statement. If you are using dependency injection, you should let the dependency injection container take care of disposing context instances.\r\nObject name: 'IotDbContext'.","IsKeySet":true,"CurrentValues":{},"OriginalValues":{},"DebugView":{}}},{"IsModified":false,"IsTemporary":false,"Metadata":{"$ref":"23"},"OriginalValue":null,"MemberEntry.Metadata":{"$ref":"23"},"CurrentValue":null,"EntityEntry":{"Entity":{},"State":"Added","Context":{},"Metadata":{},"Members":"threw System.ObjectDisposedException: Cannot access a disposed context instance. A common cause of this error is disposing a context instance that was resolved from dependency injection and then later trying to use the same context instance elsewhere in your application. This may occur if you are calling 'Dispose' on the context instance, or wrapping it in a using statement. If you are using dependency injection, you should let the dependency injection container take care of disposing context instances.\r\nObject name: 'IotDbContext'.","Navigations":"threw System.ObjectDisposedException: Cannot access a disposed context instance. A common cause of this error is disposing a context instance that was resolved from dependency injection and then later trying to use the same context instance elsewhere in your application. This may occur if you are calling 'Dispose' on the context instance, or wrapping it in a using statement. If you are using dependency injection, you should let the dependency injection container take care of disposing context instances.\r\nObject name: 'IotDbContext'.","Properties":[null,null,null,null,null,null,null,null,null,null],"References":[],"Collections":"threw System.ObjectDisposedException: Cannot access a disposed context instance. A common cause of this error is disposing a context instance that was resolved from dependency injection and then later trying to use the same context instance elsewhere in your application. This may occur if you are calling 'Dispose' on the context instance, or wrapping it in a using statement. If you are using dependency injection, you should let the dependency injection container take care of disposing context instances.\r\nObject name: 'IotDbContext'.","IsKeySet":true,"CurrentValues":{},"OriginalValues":{},"DebugView":{}}},{"IsModified":false,"IsTemporary":false,"Metadata":{"$ref":"25"},"OriginalValue":"ele","MemberEntry.Metadata":{"$ref":"25"},"CurrentValue":"ele","EntityEntry":{"Entity":{},"State":"Added","Context":{},"Metadata":{},"Members":"threw System.ObjectDisposedException: Cannot access a disposed context instance. A common cause of this error is disposing a context instance that was resolved from dependency injection and then later trying to use the same context instance elsewhere in your application. This may occur if you are calling 'Dispose' on the context instance, or wrapping it in a using statement. If you are using dependency injection, you should let the dependency injection container take care of disposing context instances.\r\nObject name: 'IotDbContext'.","Navigations":"threw System.ObjectDisposedException: Cannot access a disposed context instance. A common cause of this error is disposing a context instance that was resolved from dependency injection and then later trying to use the same context instance elsewhere in your application. This may occur if you are calling 'Dispose' on the context instance, or wrapping it in a using statement. If you are using dependency injection, you should let the dependency injection container take care of disposing context instances.\r\nObject name: 'IotDbContext'.","Properties":[null,null,null,null,null,null,null,null,null,null],"References":[],"Collections":"threw System.ObjectDisposedException: Cannot access a disposed context instance. A common cause of this error is disposing a context instance that was resolved from dependency injection and then later trying to use the same context instance elsewhere in your application. This may occur if you are calling 'Dispose' on the context instance, or wrapping it in a using statement. If you are using dependency injection, you should let the dependency injection container take care of disposing context instances.\r\nObject name: 'IotDbContext'.","IsKeySet":true,"CurrentValues":{},"OriginalValues":{},"DebugView":{}}},{"IsModified":false,"IsTemporary":false,"Metadata":{"$ref":"26"},"OriginalValue":null,"MemberEntry.Metadata":{"$ref":"26"},"CurrentValue":null,"EntityEntry":{"Entity":{},"State":"Added","Context":{},"Metadata":{},"Members":"threw System.ObjectDisposedException: Cannot access a disposed context instance. A common cause of this error is disposing a context instance that was resolved from dependency injection and then later trying to use the same context instance elsewhere in your application. This may occur if you are calling 'Dispose' on the context instance, or wrapping it in a using statement. If you are using dependency injection, you should let the dependency injection container take care of disposing context instances.\r\nObject name: 'IotDbContext'.","Navigations":"threw System.ObjectDisposedException: Cannot access a disposed context instance. A common cause of this error is disposing a context instance that was resolved from dependency injection and then later trying to use the same context instance elsewhere in your application. This may occur if you are calling 'Dispose' on the context instance, or wrapping it in a using statement. If you are using dependency injection, you should let the dependency injection container take care of disposing context instances.\r\nObject name: 'IotDbContext'.","Properties":[null,null,null,null,null,null,null,null,null,null],"References":[],"Collections":"threw System.ObjectDisposedException: Cannot access a disposed context instance. A common cause of this error is disposing a context instance that was resolved from dependency injection and then later trying to use the same context instance elsewhere in your application. This may occur if you are calling 'Dispose' on the context instance, or wrapping it in a using statement. If you are using dependency injection, you should let the dependency injection container take care of disposing context instances.\r\nObject name: 'IotDbContext'.","IsKeySet":true,"CurrentValues":{},"OriginalValues":{},"DebugView":{}}},{"IsModified":false,"IsTemporary":false,"Metadata":{"$ref":"28"},"OriginalValue":1,"MemberEntry.Metadata":{"$ref":"28"},"CurrentValue":1,"EntityEntry":{"Entity":{},"State":"Added","Context":{},"Metadata":{},"Members":"threw System.ObjectDisposedException: Cannot access a disposed context instance. A common cause of this error is disposing a context instance that was resolved from dependency injection and then later trying to use the same context instance elsewhere in your application. This may occur if you are calling 'Dispose' on the context instance, or wrapping it in a using statement. If you are using dependency injection, you should let the dependency injection container take care of disposing context instances.\r\nObject name: 'IotDbContext'.","Navigations":"threw System.ObjectDisposedException: Cannot access a disposed context instance. A common cause of this error is disposing a context instance that was resolved from dependency injection and then later trying to use the same context instance elsewhere in your application. This may occur if you are calling 'Dispose' on the context instance, or wrapping it in a using statement. If you are using dependency injection, you should let the dependency injection container take care of disposing context instances.\r\nObject name: 'IotDbContext'.","Properties":[null,null,null,null,null,null,null,null,null,null],"References":[],"Collections":"threw System.ObjectDisposedException: Cannot access a disposed context instance. A common cause of this error is disposing a context instance that was resolved from dependency injection and then later trying to use the same context instance elsewhere in your application. This may occur if you are calling 'Dispose' on the context instance, or wrapping it in a using statement. If you are using dependency injection, you should let the dependency injection container take care of disposing context instances.\r\nObject name: 'IotDbContext'.","IsKeySet":true,"CurrentValues":{},"OriginalValues":{},"DebugView":{}}},{"IsModified":false,"IsTemporary":false,"Metadata":{"$ref":"29"},"OriginalValue":"电梯","MemberEntry.Metadata":{"$ref":"29"},"CurrentValue":"电梯","EntityEntry":{"Entity":{},"State":"Added","Context":{},"Metadata":{},"Members":"threw System.ObjectDisposedException: Cannot access a disposed context instance. A common cause of this error is disposing a context instance that was resolved from dependency injection and then later trying to use the same context instance elsewhere in your application. This may occur if you are calling 'Dispose' on the context instance, or wrapping it in a using statement. If you are using dependency injection, you should let the dependency injection container take care of disposing context instances.\r\nObject name: 'IotDbContext'.","Navigations":"threw System.ObjectDisposedException: Cannot access a disposed context instance. A common cause of this error is disposing a context instance that was resolved from dependency injection and then later trying to use the same context instance elsewhere in your application. This may occur if you are calling 'Dispose' on the context instance, or wrapping it in a using statement. If you are using dependency injection, you should let the dependency injection container take care of disposing context instances.\r\nObject name: 'IotDbContext'.","Properties":[null,null,null,null,null,null,null,null,null,null],"References":[],"Collections":"threw System.ObjectDisposedException: Cannot access a disposed context instance. A common cause of this error is disposing a context instance that was resolved from dependency injection and then later trying to use the same context instance elsewhere in your application. This may occur if you are calling 'Dispose' on the context instance, or wrapping it in a using statement. If you are using dependency injection, you should let the dependency injection container take care of disposing context instances.\r\nObject name: 'IotDbContext'.","IsKeySet":true,"CurrentValues":{},"OriginalValues":{},"DebugView":{}}},{"IsModified":false,"IsTemporary":false,"Metadata":{"$ref":"31"},"OriginalValue":"MQTT","MemberEntry.Metadata":{"$ref":"31"},"CurrentValue":"MQTT","EntityEntry":{"Entity":{},"State":"Added","Context":{},"Metadata":{},"Members":"threw System.ObjectDisposedException: Cannot access a disposed context instance. A common cause of this error is disposing a context instance that was resolved from dependency injection and then later trying to use the same context instance elsewhere in your application. This may occur if you are calling 'Dispose' on the context instance, or wrapping it in a using statement. If you are using dependency injection, you should let the dependency injection container take care of disposing context instances.\r\nObject name: 'IotDbContext'.","Navigations":"threw System.ObjectDisposedException: Cannot access a disposed context instance. A common cause of this error is disposing a context instance that was resolved from dependency injection and then later trying to use the same context instance elsewhere in your application. This may occur if you are calling 'Dispose' on the context instance, or wrapping it in a using statement. If you are using dependency injection, you should let the dependency injection container take care of disposing context instances.\r\nObject name: 'IotDbContext'.","Properties":[null,null,null,null,null,null,null,null,null,null],"References":[],"Collections":"threw System.ObjectDisposedException: Cannot access a disposed context instance. A common cause of this error is disposing a context instance that was resolved from dependency injection and then later trying to use the same context instance elsewhere in your application. This may occur if you are calling 'Dispose' on the context instance, or wrapping it in a using statement. If you are using dependency injection, you should let the dependency injection container take care of disposing context instances.\r\nObject name: 'IotDbContext'.","IsKeySet":true,"CurrentValues":{},"OriginalValues":{},"DebugView":{}}},{"IsModified":false,"IsTemporary":false,"Metadata":{"$ref":"33"},"OriginalValue":"DirectDevice","MemberEntry.Metadata":{"$ref":"33"},"CurrentValue":"DirectDevice","EntityEntry":{"Entity":{},"State":"Added","Context":{},"Metadata":{},"Members":"threw System.ObjectDisposedException: Cannot access a disposed context instance. A common cause of this error is disposing a context instance that was resolved from dependency injection and then later trying to use the same context instance elsewhere in your application. This may occur if you are calling 'Dispose' on the context instance, or wrapping it in a using statement. If you are using dependency injection, you should let the dependency injection container take care of disposing context instances.\r\nObject name: 'IotDbContext'.","Navigations":"threw System.ObjectDisposedException: Cannot access a disposed context instance. A common cause of this error is disposing a context instance that was resolved from dependency injection and then later trying to use the same context instance elsewhere in your application. This may occur if you are calling 'Dispose' on the context instance, or wrapping it in a using statement. If you are using dependency injection, you should let the dependency injection container take care of disposing context instances.\r\nObject name: 'IotDbContext'.","Properties":[null,null,null,null,null,null,null,null,null,null],"References":[],"Collections":"threw System.ObjectDisposedException: Cannot access a disposed context instance. A common cause of this error is disposing a context instance that was resolved from dependency injection and then later trying to use the same context instance elsewhere in your application. This may occur if you are calling 'Dispose' on the context instance, or wrapping it in a using statement. If you are using dependency injection, you should let the dependency injection container take care of disposing context instances.\r\nObject name: 'IotDbContext'.","IsKeySet":true,"CurrentValues":{},"OriginalValues":{},"DebugView":{}}},{"IsModified":false,"IsTemporary":false,"Metadata":{"$ref":"35"},"OriginalValue":"ModbusRTU","MemberEntry.Metadata":{"$ref":"35"},"CurrentValue":"ModbusRTU","EntityEntry":{"Entity":{},"State":"Added","Context":{},"Metadata":{},"Members":"threw System.ObjectDisposedException: Cannot access a disposed context instance. A common cause of this error is disposing a context instance that was resolved from dependency injection and then later trying to use the same context instance elsewhere in your application. This may occur if you are calling 'Dispose' on the context instance, or wrapping it in a using statement. If you are using dependency injection, you should let the dependency injection container take care of disposing context instances.\r\nObject name: 'IotDbContext'.","Navigations":"threw System.ObjectDisposedException: Cannot access a disposed context instance. A common cause of this error is disposing a context instance that was resolved from dependency injection and then later trying to use the same context instance elsewhere in your application. This may occur if you are calling 'Dispose' on the context instance, or wrapping it in a using statement. If you are using dependency injection, you should let the dependency injection container take care of disposing context instances.\r\nObject name: 'IotDbContext'.","Properties":[null,null,null,null,null,null,null,null,null,null],"References":[],"Collections":"threw System.ObjectDisposedException: Cannot access a disposed context instance. A common cause of this error is disposing a context instance that was resolved from dependency injection and then later trying to use the same context instance elsewhere in your application. This may occur if you are calling 'Dispose' on the context instance, or wrapping it in a using statement. If you are using dependency injection, you should let the dependency injection container take care of disposing context instances.\r\nObject name: 'IotDbContext'.","IsKeySet":true,"CurrentValues":{},"OriginalValues":{},"DebugView":{}}},{"IsModified":false,"IsTemporary":false,"Metadata":{"$ref":"36"},"OriginalValue":"123qweasd","MemberEntry.Metadata":{"$ref":"36"},"CurrentValue":"123qweasd","EntityEntry":{"Entity":{},"State":"Added","Context":{},"Metadata":{},"Members":"threw System.ObjectDisposedException: Cannot access a disposed context instance. A common cause of this error is disposing a context instance that was resolved from dependency injection and then later trying to use the same context instance elsewhere in your application. This may occur if you are calling 'Dispose' on the context instance, or wrapping it in a using statement. If you are using dependency injection, you should let the dependency injection container take care of disposing context instances.\r\nObject name: 'IotDbContext'.","Navigations":"threw System.ObjectDisposedException: Cannot access a disposed context instance. A common cause of this error is disposing a context instance that was resolved from dependency injection and then later trying to use the same context instance elsewhere in your application. This may occur if you are calling 'Dispose' on the context instance, or wrapping it in a using statement. If you are using dependency injection, you should let the dependency injection container take care of disposing context instances.\r\nObject name: 'IotDbContext'.","Properties":[null,null,null,null,null,null,null,null,null,null],"References":[],"Collections":"threw System.ObjectDisposedException: Cannot access a disposed context instance. A common cause of this error is disposing a context instance that was resolved from dependency injection and then later trying to use the same context instance elsewhere in your application. This may occur if you are calling 'Dispose' on the context instance, or wrapping it in a using statement. If you are using dependency injection, you should let the dependency injection container take care of disposing context instances.\r\nObject name: 'IotDbContext'.","IsKeySet":true,"CurrentValues":{},"OriginalValues":{},"DebugView":{}}}],"References":[],"Collections":"threw System.ObjectDisposedException: Cannot access a disposed context instance. A common cause of this error is disposing a context instance that was resolved from dependency injection and then later trying to use the same context instance elsewhere in your application. This may occur if you are calling 'Dispose' on the context instance, or wrapping it in a using statement. If you are using dependency injection, you should let the dependency injection container take care of disposing context instances.\r\nObject name: 'IotDbContext'.","IsKeySet":true,"CurrentValues":{"Properties":[{"$ref":"2"},{"$ref":"23"},{"$ref":"25"},{"$ref":"26"},{"$ref":"28"},{"$ref":"29"},{"$ref":"31"},{"$ref":"33"},{"$ref":"35"},{"$ref":"36"}],"EntityType":{"$ref":"1"}},"OriginalValues":{"Properties":[{"$ref":"2"},{"$ref":"23"},{"$ref":"25"},{"$ref":"26"},{"$ref":"28"},{"$ref":"29"},{"$ref":"31"},{"$ref":"33"},{"$ref":"35"},{"$ref":"36"}],"EntityType":{"$ref":"1"}},"DebugView":{"LongView":"Product {Id: 1} Added\r\n  Id: 1 PK\r\n  Category: <null>\r\n  Code: 'ele'\r\n  DataFormat: <null>\r\n  DeviceCount: 1\r\n  Name: '电梯'\r\n  NetType: 'MQTT'\r\n  NodeType: 'DirectDevice'\r\n  ProtocolType: 'ModbusRTU'\r\n  Secret: '123qweasd'\r\n  Devices: [{Id: 1}]","ShortView":"Product {Id: 1} Added"}}},{"IsModified":false,"IsTemporary":false,"Metadata":{"$ref":"35"},"OriginalValue":"ModbusRTU","MemberEntry.Metadata":{"$ref":"35"},"CurrentValue":"ModbusRTU","EntityEntry":{"Entity":{"$ref":"20"},"State":"Added","Context":{"$ref":"21"},"Metadata":{"$ref":"1"},"Members":"threw System.ObjectDisposedException: Cannot access a disposed context instance. A common cause of this error is disposing a context instance that was resolved from dependency injection and then later trying to use the same context instance elsewhere in your application. This may occur if you are calling 'Dispose' on the context instance, or wrapping it in a using statement. If you are using dependency injection, you should let the dependency injection container take care of disposing context instances.\r\nObject name: 'IotDbContext'.","Navigations":"threw System.ObjectDisposedException: Cannot access a disposed context instance. A common cause of this error is disposing a context instance that was resolved from dependency injection and then later trying to use the same context instance elsewhere in your application. This may occur if you are calling 'Dispose' on the context instance, or wrapping it in a using statement. If you are using dependency injection, you should let the dependency injection container take care of disposing context instances.\r\nObject name: 'IotDbContext'.","Properties":[{"IsModified":false,"IsTemporary":false,"Metadata":{"$ref":"2"},"OriginalValue":1,"MemberEntry.Metadata":{"$ref":"2"},"CurrentValue":1,"EntityEntry":{"Entity":{},"State":"Added","Context":{},"Metadata":{},"Members":"threw System.ObjectDisposedException: Cannot access a disposed context instance. A common cause of this error is disposing a context instance that was resolved from dependency injection and then later trying to use the same context instance elsewhere in your application. This may occur if you are calling 'Dispose' on the context instance, or wrapping it in a using statement. If you are using dependency injection, you should let the dependency injection container take care of disposing context instances.\r\nObject name: 'IotDbContext'.","Navigations":"threw System.ObjectDisposedException: Cannot access a disposed context instance. A common cause of this error is disposing a context instance that was resolved from dependency injection and then later trying to use the same context instance elsewhere in your application. This may occur if you are calling 'Dispose' on the context instance, or wrapping it in a using statement. If you are using dependency injection, you should let the dependency injection container take care of disposing context instances.\r\nObject name: 'IotDbContext'.","Properties":[null,null,null,null,null,null,null,null,null,null],"References":[],"Collections":"threw System.ObjectDisposedException: Cannot access a disposed context instance. A common cause of this error is disposing a context instance that was resolved from dependency injection and then later trying to use the same context instance elsewhere in your application. This may occur if you are calling 'Dispose' on the context instance, or wrapping it in a using statement. If you are using dependency injection, you should let the dependency injection container take care of disposing context instances.\r\nObject name: 'IotDbContext'.","IsKeySet":true,"CurrentValues":{},"OriginalValues":{},"DebugView":{}}},{"IsModified":false,"IsTemporary":false,"Metadata":{"$ref":"23"},"OriginalValue":null,"MemberEntry.Metadata":{"$ref":"23"},"CurrentValue":null,"EntityEntry":{"Entity":{},"State":"Added","Context":{},"Metadata":{},"Members":"threw System.ObjectDisposedException: Cannot access a disposed context instance. A common cause of this error is disposing a context instance that was resolved from dependency injection and then later trying to use the same context instance elsewhere in your application. This may occur if you are calling 'Dispose' on the context instance, or wrapping it in a using statement. If you are using dependency injection, you should let the dependency injection container take care of disposing context instances.\r\nObject name: 'IotDbContext'.","Navigations":"threw System.ObjectDisposedException: Cannot access a disposed context instance. A common cause of this error is disposing a context instance that was resolved from dependency injection and then later trying to use the same context instance elsewhere in your application. This may occur if you are calling 'Dispose' on the context instance, or wrapping it in a using statement. If you are using dependency injection, you should let the dependency injection container take care of disposing context instances.\r\nObject name: 'IotDbContext'.","Properties":[null,null,null,null,null,null,null,null,null,null],"References":[],"Collections":"threw System.ObjectDisposedException: Cannot access a disposed context instance. A common cause of this error is disposing a context instance that was resolved from dependency injection and then later trying to use the same context instance elsewhere in your application. This may occur if you are calling 'Dispose' on the context instance, or wrapping it in a using statement. If you are using dependency injection, you should let the dependency injection container take care of disposing context instances.\r\nObject name: 'IotDbContext'.","IsKeySet":true,"CurrentValues":{},"OriginalValues":{},"DebugView":{}}},{"IsModified":false,"IsTemporary":false,"Metadata":{"$ref":"25"},"OriginalValue":"ele","MemberEntry.Metadata":{"$ref":"25"},"CurrentValue":"ele","EntityEntry":{"Entity":{},"State":"Added","Context":{},"Metadata":{},"Members":"threw System.ObjectDisposedException: Cannot access a disposed context instance. A common cause of this error is disposing a context instance that was resolved from dependency injection and then later trying to use the same context instance elsewhere in your application. This may occur if you are calling 'Dispose' on the context instance, or wrapping it in a using statement. If you are using dependency injection, you should let the dependency injection container take care of disposing context instances.\r\nObject name: 'IotDbContext'.","Navigations":"threw System.ObjectDisposedException: Cannot access a disposed context instance. A common cause of this error is disposing a context instance that was resolved from dependency injection and then later trying to use the same context instance elsewhere in your application. This may occur if you are calling 'Dispose' on the context instance, or wrapping it in a using statement. If you are using dependency injection, you should let the dependency injection container take care of disposing context instances.\r\nObject name: 'IotDbContext'.","Properties":[null,null,null,null,null,null,null,null,null,null],"References":[],"Collections":"threw System.ObjectDisposedException: Cannot access a disposed context instance. A common cause of this error is disposing a context instance that was resolved from dependency injection and then later trying to use the same context instance elsewhere in your application. This may occur if you are calling 'Dispose' on the context instance, or wrapping it in a using statement. If you are using dependency injection, you should let the dependency injection container take care of disposing context instances.\r\nObject name: 'IotDbContext'.","IsKeySet":true,"CurrentValues":{},"OriginalValues":{},"DebugView":{}}},{"IsModified":false,"IsTemporary":false,"Metadata":{"$ref":"26"},"OriginalValue":null,"MemberEntry.Metadata":{"$ref":"26"},"CurrentValue":null,"EntityEntry":{"Entity":{},"State":"Added","Context":{},"Metadata":{},"Members":"threw System.ObjectDisposedException: Cannot access a disposed context instance. A common cause of this error is disposing a context instance that was resolved from dependency injection and then later trying to use the same context instance elsewhere in your application. This may occur if you are calling 'Dispose' on the context instance, or wrapping it in a using statement. If you are using dependency injection, you should let the dependency injection container take care of disposing context instances.\r\nObject name: 'IotDbContext'.","Navigations":"threw System.ObjectDisposedException: Cannot access a disposed context instance. A common cause of this error is disposing a context instance that was resolved from dependency injection and then later trying to use the same context instance elsewhere in your application. This may occur if you are calling 'Dispose' on the context instance, or wrapping it in a using statement. If you are using dependency injection, you should let the dependency injection container take care of disposing context instances.\r\nObject name: 'IotDbContext'.","Properties":[null,null,null,null,null,null,null,null,null,null],"References":[],"Collections":"threw System.ObjectDisposedException: Cannot access a disposed context instance. A common cause of this error is disposing a context instance that was resolved from dependency injection and then later trying to use the same context instance elsewhere in your application. This may occur if you are calling 'Dispose' on the context instance, or wrapping it in a using statement. If you are using dependency injection, you should let the dependency injection container take care of disposing context instances.\r\nObject name: 'IotDbContext'.","IsKeySet":true,"CurrentValues":{},"OriginalValues":{},"DebugView":{}}},{"IsModified":false,"IsTemporary":false,"Metadata":{"$ref":"28"},"OriginalValue":1,"MemberEntry.Metadata":{"$ref":"28"},"CurrentValue":1,"EntityEntry":{"Entity":{},"State":"Added","Context":{},"Metadata":{},"Members":"threw System.ObjectDisposedException: Cannot access a disposed context instance. A common cause of this error is disposing a context instance that was resolved from dependency injection and then later trying to use the same context instance elsewhere in your application. This may occur if you are calling 'Dispose' on the context instance, or wrapping it in a using statement. If you are using dependency injection, you should let the dependency injection container take care of disposing context instances.\r\nObject name: 'IotDbContext'.","Navigations":"threw System.ObjectDisposedException: Cannot access a disposed context instance. A common cause of this error is disposing a context instance that was resolved from dependency injection and then later trying to use the same context instance elsewhere in your application. This may occur if you are calling 'Dispose' on the context instance, or wrapping it in a using statement. If you are using dependency injection, you should let the dependency injection container take care of disposing context instances.\r\nObject name: 'IotDbContext'.","Properties":[null,null,null,null,null,null,null,null,null,null],"References":[],"Collections":"threw System.ObjectDisposedException: Cannot access a disposed context instance. A common cause of this error is disposing a context instance that was resolved from dependency injection and then later trying to use the same context instance elsewhere in your application. This may occur if you are calling 'Dispose' on the context instance, or wrapping it in a using statement. If you are using dependency injection, you should let the dependency injection container take care of disposing context instances.\r\nObject name: 'IotDbContext'.","IsKeySet":true,"CurrentValues":{},"OriginalValues":{},"DebugView":{}}},{"IsModified":false,"IsTemporary":false,"Metadata":{"$ref":"29"},"OriginalValue":"电梯","MemberEntry.Metadata":{"$ref":"29"},"CurrentValue":"电梯","EntityEntry":{"Entity":{},"State":"Added","Context":{},"Metadata":{},"Members":"threw System.ObjectDisposedException: Cannot access a disposed context instance. A common cause of this error is disposing a context instance that was resolved from dependency injection and then later trying to use the same context instance elsewhere in your application. This may occur if you are calling 'Dispose' on the context instance, or wrapping it in a using statement. If you are using dependency injection, you should let the dependency injection container take care of disposing context instances.\r\nObject name: 'IotDbContext'.","Navigations":"threw System.ObjectDisposedException: Cannot access a disposed context instance. A common cause of this error is disposing a context instance that was resolved from dependency injection and then later trying to use the same context instance elsewhere in your application. This may occur if you are calling 'Dispose' on the context instance, or wrapping it in a using statement. If you are using dependency injection, you should let the dependency injection container take care of disposing context instances.\r\nObject name: 'IotDbContext'.","Properties":[null,null,null,null,null,null,null,null,null,null],"References":[],"Collections":"threw System.ObjectDisposedException: Cannot access a disposed context instance. A common cause of this error is disposing a context instance that was resolved from dependency injection and then later trying to use the same context instance elsewhere in your application. This may occur if you are calling 'Dispose' on the context instance, or wrapping it in a using statement. If you are using dependency injection, you should let the dependency injection container take care of disposing context instances.\r\nObject name: 'IotDbContext'.","IsKeySet":true,"CurrentValues":{},"OriginalValues":{},"DebugView":{}}},{"IsModified":false,"IsTemporary":false,"Metadata":{"$ref":"31"},"OriginalValue":"MQTT","MemberEntry.Metadata":{"$ref":"31"},"CurrentValue":"MQTT","EntityEntry":{"Entity":{},"State":"Added","Context":{},"Metadata":{},"Members":"threw System.ObjectDisposedException: Cannot access a disposed context instance. A common cause of this error is disposing a context instance that was resolved from dependency injection and then later trying to use the same context instance elsewhere in your application. This may occur if you are calling 'Dispose' on the context instance, or wrapping it in a using statement. If you are using dependency injection, you should let the dependency injection container take care of disposing context instances.\r\nObject name: 'IotDbContext'.","Navigations":"threw System.ObjectDisposedException: Cannot access a disposed context instance. A common cause of this error is disposing a context instance that was resolved from dependency injection and then later trying to use the same context instance elsewhere in your application. This may occur if you are calling 'Dispose' on the context instance, or wrapping it in a using statement. If you are using dependency injection, you should let the dependency injection container take care of disposing context instances.\r\nObject name: 'IotDbContext'.","Properties":[null,null,null,null,null,null,null,null,null,null],"References":[],"Collections":"threw System.ObjectDisposedException: Cannot access a disposed context instance. A common cause of this error is disposing a context instance that was resolved from dependency injection and then later trying to use the same context instance elsewhere in your application. This may occur if you are calling 'Dispose' on the context instance, or wrapping it in a using statement. If you are using dependency injection, you should let the dependency injection container take care of disposing context instances.\r\nObject name: 'IotDbContext'.","IsKeySet":true,"CurrentValues":{},"OriginalValues":{},"DebugView":{}}},{"IsModified":false,"IsTemporary":false,"Metadata":{"$ref":"33"},"OriginalValue":"DirectDevice","MemberEntry.Metadata":{"$ref":"33"},"CurrentValue":"DirectDevice","EntityEntry":{"Entity":{},"State":"Added","Context":{},"Metadata":{},"Members":"threw System.ObjectDisposedException: Cannot access a disposed context instance. A common cause of this error is disposing a context instance that was resolved from dependency injection and then later trying to use the same context instance elsewhere in your application. This may occur if you are calling 'Dispose' on the context instance, or wrapping it in a using statement. If you are using dependency injection, you should let the dependency injection container take care of disposing context instances.\r\nObject name: 'IotDbContext'.","Navigations":"threw System.ObjectDisposedException: Cannot access a disposed context instance. A common cause of this error is disposing a context instance that was resolved from dependency injection and then later trying to use the same context instance elsewhere in your application. This may occur if you are calling 'Dispose' on the context instance, or wrapping it in a using statement. If you are using dependency injection, you should let the dependency injection container take care of disposing context instances.\r\nObject name: 'IotDbContext'.","Properties":[null,null,null,null,null,null,null,null,null,null],"References":[],"Collections":"threw System.ObjectDisposedException: Cannot access a disposed context instance. A common cause of this error is disposing a context instance that was resolved from dependency injection and then later trying to use the same context instance elsewhere in your application. This may occur if you are calling 'Dispose' on the context instance, or wrapping it in a using statement. If you are using dependency injection, you should let the dependency injection container take care of disposing context instances.\r\nObject name: 'IotDbContext'.","IsKeySet":true,"CurrentValues":{},"OriginalValues":{},"DebugView":{}}},{"IsModified":false,"IsTemporary":false,"Metadata":{"$ref":"35"},"OriginalValue":"ModbusRTU","MemberEntry.Metadata":{"$ref":"35"},"CurrentValue":"ModbusRTU","EntityEntry":{"Entity":{},"State":"Added","Context":{},"Metadata":{},"Members":"threw System.ObjectDisposedException: Cannot access a disposed context instance. A common cause of this error is disposing a context instance that was resolved from dependency injection and then later trying to use the same context instance elsewhere in your application. This may occur if you are calling 'Dispose' on the context instance, or wrapping it in a using statement. If you are using dependency injection, you should let the dependency injection container take care of disposing context instances.\r\nObject name: 'IotDbContext'.","Navigations":"threw System.ObjectDisposedException: Cannot access a disposed context instance. A common cause of this error is disposing a context instance that was resolved from dependency injection and then later trying to use the same context instance elsewhere in your application. This may occur if you are calling 'Dispose' on the context instance, or wrapping it in a using statement. If you are using dependency injection, you should let the dependency injection container take care of disposing context instances.\r\nObject name: 'IotDbContext'.","Properties":[null,null,null,null,null,null,null,null,null,null],"References":[],"Collections":"threw System.ObjectDisposedException: Cannot access a disposed context instance. A common cause of this error is disposing a context instance that was resolved from dependency injection and then later trying to use the same context instance elsewhere in your application. This may occur if you are calling 'Dispose' on the context instance, or wrapping it in a using statement. If you are using dependency injection, you should let the dependency injection container take care of disposing context instances.\r\nObject name: 'IotDbContext'.","IsKeySet":true,"CurrentValues":{},"OriginalValues":{},"DebugView":{}}},{"IsModified":false,"IsTemporary":false,"Metadata":{"$ref":"36"},"OriginalValue":"123qweasd","MemberEntry.Metadata":{"$ref":"36"},"CurrentValue":"123qweasd","EntityEntry":{"Entity":{},"State":"Added","Context":{},"Metadata":{},"Members":"threw System.ObjectDisposedException: Cannot access a disposed context instance. A common cause of this error is disposing a context instance that was resolved from dependency injection and then later trying to use the same context instance elsewhere in your application. This may occur if you are calling 'Dispose' on the context instance, or wrapping it in a using statement. If you are using dependency injection, you should let the dependency injection container take care of disposing context instances.\r\nObject name: 'IotDbContext'.","Navigations":"threw System.ObjectDisposedException: Cannot access a disposed context instance. A common cause of this error is disposing a context instance that was resolved from dependency injection and then later trying to use the same context instance elsewhere in your application. This may occur if you are calling 'Dispose' on the context instance, or wrapping it in a using statement. If you are using dependency injection, you should let the dependency injection container take care of disposing context instances.\r\nObject name: 'IotDbContext'.","Properties":[null,null,null,null,null,null,null,null,null,null],"References":[],"Collections":"threw System.ObjectDisposedException: Cannot access a disposed context instance. A common cause of this error is disposing a context instance that was resolved from dependency injection and then later trying to use the same context instance elsewhere in your application. This may occur if you are calling 'Dispose' on the context instance, or wrapping it in a using statement. If you are using dependency injection, you should let the dependency injection container take care of disposing context instances.\r\nObject name: 'IotDbContext'.","IsKeySet":true,"CurrentValues":{},"OriginalValues":{},"DebugView":{}}}],"References":[],"Collections":"threw System.ObjectDisposedException: Cannot access a disposed context instance. A common cause of this error is disposing a context instance that was resolved from dependency injection and then later trying to use the same context instance elsewhere in your application. This may occur if you are calling 'Dispose' on the context instance, or wrapping it in a using statement. If you are using dependency injection, you should let the dependency injection container take care of disposing context instances.\r\nObject name: 'IotDbContext'.","IsKeySet":true,"CurrentValues":{"Properties":[{"$ref":"2"},{"$ref":"23"},{"$ref":"25"},{"$ref":"26"},{"$ref":"28"},{"$ref":"29"},{"$ref":"31"},{"$ref":"33"},{"$ref":"35"},{"$ref":"36"}],"EntityType":{"$ref":"1"}},"OriginalValues":{"Properties":[{"$ref":"2"},{"$ref":"23"},{"$ref":"25"},{"$ref":"26"},{"$ref":"28"},{"$ref":"29"},{"$ref":"31"},{"$ref":"33"},{"$ref":"35"},{"$ref":"36"}],"EntityType":{"$ref":"1"}},"DebugView":{"LongView":"Product {Id: 1} Added\r\n  Id: 1 PK\r\n  Category: <null>\r\n  Code: 'ele'\r\n  DataFormat: <null>\r\n  DeviceCount: 1\r\n  Name: '电梯'\r\n  NetType: 'MQTT'\r\n  NodeType: 'DirectDevice'\r\n  ProtocolType: 'ModbusRTU'\r\n  Secret: '123qweasd'\r\n  Devices: [{Id: 1}]","ShortView":"Product {Id: 1} Added"}}},{"IsModified":false,"IsTemporary":false,"Metadata":{"$ref":"36"},"OriginalValue":"123qweasd","MemberEntry.Metadata":{"$ref":"36"},"CurrentValue":"123qweasd","EntityEntry":{"Entity":{"$ref":"20"},"State":"Added","Context":{"$ref":"21"},"Metadata":{"$ref":"1"},"Members":"threw System.ObjectDisposedException: Cannot access a disposed context instance. A common cause of this error is disposing a context instance that was resolved from dependency injection and then later trying to use the same context instance elsewhere in your application. This may occur if you are calling 'Dispose' on the context instance, or wrapping it in a using statement. If you are using dependency injection, you should let the dependency injection container take care of disposing context instances.\r\nObject name: 'IotDbContext'.","Navigations":"threw System.ObjectDisposedException: Cannot access a disposed context instance. A common cause of this error is disposing a context instance that was resolved from dependency injection and then later trying to use the same context instance elsewhere in your application. This may occur if you are calling 'Dispose' on the context instance, or wrapping it in a using statement. If you are using dependency injection, you should let the dependency injection container take care of disposing context instances.\r\nObject name: 'IotDbContext'.","Properties":[{"IsModified":false,"IsTemporary":false,"Metadata":{"$ref":"2"},"OriginalValue":1,"MemberEntry.Metadata":{"$ref":"2"},"CurrentValue":1,"EntityEntry":{"Entity":{},"State":"Added","Context":{},"Metadata":{},"Members":"threw System.ObjectDisposedException: Cannot access a disposed context instance. A common cause of this error is disposing a context instance that was resolved from dependency injection and then later trying to use the same context instance elsewhere in your application. This may occur if you are calling 'Dispose' on the context instance, or wrapping it in a using statement. If you are using dependency injection, you should let the dependency injection container take care of disposing context instances.\r\nObject name: 'IotDbContext'.","Navigations":"threw System.ObjectDisposedException: Cannot access a disposed context instance. A common cause of this error is disposing a context instance that was resolved from dependency injection and then later trying to use the same context instance elsewhere in your application. This may occur if you are calling 'Dispose' on the context instance, or wrapping it in a using statement. If you are using dependency injection, you should let the dependency injection container take care of disposing context instances.\r\nObject name: 'IotDbContext'.","Properties":[null,null,null,null,null,null,null,null,null,null],"References":[],"Collections":"threw System.ObjectDisposedException: Cannot access a disposed context instance. A common cause of this error is disposing a context instance that was resolved from dependency injection and then later trying to use the same context instance elsewhere in your application. This may occur if you are calling 'Dispose' on the context instance, or wrapping it in a using statement. If you are using dependency injection, you should let the dependency injection container take care of disposing context instances.\r\nObject name: 'IotDbContext'.","IsKeySet":true,"CurrentValues":{},"OriginalValues":{},"DebugView":{}}},{"IsModified":false,"IsTemporary":false,"Metadata":{"$ref":"23"},"OriginalValue":null,"MemberEntry.Metadata":{"$ref":"23"},"CurrentValue":null,"EntityEntry":{"Entity":{},"State":"Added","Context":{},"Metadata":{},"Members":"threw System.ObjectDisposedException: Cannot access a disposed context instance. A common cause of this error is disposing a context instance that was resolved from dependency injection and then later trying to use the same context instance elsewhere in your application. This may occur if you are calling 'Dispose' on the context instance, or wrapping it in a using statement. If you are using dependency injection, you should let the dependency injection container take care of disposing context instances.\r\nObject name: 'IotDbContext'.","Navigations":"threw System.ObjectDisposedException: Cannot access a disposed context instance. A common cause of this error is disposing a context instance that was resolved from dependency injection and then later trying to use the same context instance elsewhere in your application. This may occur if you are calling 'Dispose' on the context instance, or wrapping it in a using statement. If you are using dependency injection, you should let the dependency injection container take care of disposing context instances.\r\nObject name: 'IotDbContext'.","Properties":[null,null,null,null,null,null,null,null,null,null],"References":[],"Collections":"threw System.ObjectDisposedException: Cannot access a disposed context instance. A common cause of this error is disposing a context instance that was resolved from dependency injection and then later trying to use the same context instance elsewhere in your application. This may occur if you are calling 'Dispose' on the context instance, or wrapping it in a using statement. If you are using dependency injection, you should let the dependency injection container take care of disposing context instances.\r\nObject name: 'IotDbContext'.","IsKeySet":true,"CurrentValues":{},"OriginalValues":{},"DebugView":{}}},{"IsModified":false,"IsTemporary":false,"Metadata":{"$ref":"25"},"OriginalValue":"ele","MemberEntry.Metadata":{"$ref":"25"},"CurrentValue":"ele","EntityEntry":{"Entity":{},"State":"Added","Context":{},"Metadata":{},"Members":"threw System.ObjectDisposedException: Cannot access a disposed context instance. A common cause of this error is disposing a context instance that was resolved from dependency injection and then later trying to use the same context instance elsewhere in your application. This may occur if you are calling 'Dispose' on the context instance, or wrapping it in a using statement. If you are using dependency injection, you should let the dependency injection container take care of disposing context instances.\r\nObject name: 'IotDbContext'.","Navigations":"threw System.ObjectDisposedException: Cannot access a disposed context instance. A common cause of this error is disposing a context instance that was resolved from dependency injection and then later trying to use the same context instance elsewhere in your application. This may occur if you are calling 'Dispose' on the context instance, or wrapping it in a using statement. If you are using dependency injection, you should let the dependency injection container take care of disposing context instances.\r\nObject name: 'IotDbContext'.","Properties":[null,null,null,null,null,null,null,null,null,null],"References":[],"Collections":"threw System.ObjectDisposedException: Cannot access a disposed context instance. A common cause of this error is disposing a context instance that was resolved from dependency injection and then later trying to use the same context instance elsewhere in your application. This may occur if you are calling 'Dispose' on the context instance, or wrapping it in a using statement. If you are using dependency injection, you should let the dependency injection container take care of disposing context instances.\r\nObject name: 'IotDbContext'.","IsKeySet":true,"CurrentValues":{},"OriginalValues":{},"DebugView":{}}},{"IsModified":false,"IsTemporary":false,"Metadata":{"$ref":"26"},"OriginalValue":null,"MemberEntry.Metadata":{"$ref":"26"},"CurrentValue":null,"EntityEntry":{"Entity":{},"State":"Added","Context":{},"Metadata":{},"Members":"threw System.ObjectDisposedException: Cannot access a disposed context instance. A common cause of this error is disposing a context instance that was resolved from dependency injection and then later trying to use the same context instance elsewhere in your application. This may occur if you are calling 'Dispose' on the context instance, or wrapping it in a using statement. If you are using dependency injection, you should let the dependency injection container take care of disposing context instances.\r\nObject name: 'IotDbContext'.","Navigations":"threw System.ObjectDisposedException: Cannot access a disposed context instance. A common cause of this error is disposing a context instance that was resolved from dependency injection and then later trying to use the same context instance elsewhere in your application. This may occur if you are calling 'Dispose' on the context instance, or wrapping it in a using statement. If you are using dependency injection, you should let the dependency injection container take care of disposing context instances.\r\nObject name: 'IotDbContext'.","Properties":[null,null,null,null,null,null,null,null,null,null],"References":[],"Collections":"threw System.ObjectDisposedException: Cannot access a disposed context instance. A common cause of this error is disposing a context instance that was resolved from dependency injection and then later trying to use the same context instance elsewhere in your application. This may occur if you are calling 'Dispose' on the context instance, or wrapping it in a using statement. If you are using dependency injection, you should let the dependency injection container take care of disposing context instances.\r\nObject name: 'IotDbContext'.","IsKeySet":true,"CurrentValues":{},"OriginalValues":{},"DebugView":{}}},{"IsModified":false,"IsTemporary":false,"Metadata":{"$ref":"28"},"OriginalValue":1,"MemberEntry.Metadata":{"$ref":"28"},"CurrentValue":1,"EntityEntry":{"Entity":{},"State":"Added","Context":{},"Metadata":{},"Members":"threw System.ObjectDisposedException: Cannot access a disposed context instance. A common cause of this error is disposing a context instance that was resolved from dependency injection and then later trying to use the same context instance elsewhere in your application. This may occur if you are calling 'Dispose' on the context instance, or wrapping it in a using statement. If you are using dependency injection, you should let the dependency injection container take care of disposing context instances.\r\nObject name: 'IotDbContext'.","Navigations":"threw System.ObjectDisposedException: Cannot access a disposed context instance. A common cause of this error is disposing a context instance that was resolved from dependency injection and then later trying to use the same context instance elsewhere in your application. This may occur if you are calling 'Dispose' on the context instance, or wrapping it in a using statement. If you are using dependency injection, you should let the dependency injection container take care of disposing context instances.\r\nObject name: 'IotDbContext'.","Properties":[null,null,null,null,null,null,null,null,null,null],"References":[],"Collections":"threw System.ObjectDisposedException: Cannot access a disposed context instance. A common cause of this error is disposing a context instance that was resolved from dependency injection and then later trying to use the same context instance elsewhere in your application. This may occur if you are calling 'Dispose' on the context instance, or wrapping it in a using statement. If you are using dependency injection, you should let the dependency injection container take care of disposing context instances.\r\nObject name: 'IotDbContext'.","IsKeySet":true,"CurrentValues":{},"OriginalValues":{},"DebugView":{}}},{"IsModified":false,"IsTemporary":false,"Metadata":{"$ref":"29"},"OriginalValue":"电梯","MemberEntry.Metadata":{"$ref":"29"},"CurrentValue":"电梯","EntityEntry":{"Entity":{},"State":"Added","Context":{},"Metadata":{},"Members":"threw System.ObjectDisposedException: Cannot access a disposed context instance. A common cause of this error is disposing a context instance that was resolved from dependency injection and then later trying to use the same context instance elsewhere in your application. This may occur if you are calling 'Dispose' on the context instance, or wrapping it in a using statement. If you are using dependency injection, you should let the dependency injection container take care of disposing context instances.\r\nObject name: 'IotDbContext'.","Navigations":"threw System.ObjectDisposedException: Cannot access a disposed context instance. A common cause of this error is disposing a context instance that was resolved from dependency injection and then later trying to use the same context instance elsewhere in your application. This may occur if you are calling 'Dispose' on the context instance, or wrapping it in a using statement. If you are using dependency injection, you should let the dependency injection container take care of disposing context instances.\r\nObject name: 'IotDbContext'.","Properties":[null,null,null,null,null,null,null,null,null,null],"References":[],"Collections":"threw System.ObjectDisposedException: Cannot access a disposed context instance. A common cause of this error is disposing a context instance that was resolved from dependency injection and then later trying to use the same context instance elsewhere in your application. This may occur if you are calling 'Dispose' on the context instance, or wrapping it in a using statement. If you are using dependency injection, you should let the dependency injection container take care of disposing context instances.\r\nObject name: 'IotDbContext'.","IsKeySet":true,"CurrentValues":{},"OriginalValues":{},"DebugView":{}}},{"IsModified":false,"IsTemporary":false,"Metadata":{"$ref":"31"},"OriginalValue":"MQTT","MemberEntry.Metadata":{"$ref":"31"},"CurrentValue":"MQTT","EntityEntry":{"Entity":{},"State":"Added","Context":{},"Metadata":{},"Members":"threw System.ObjectDisposedException: Cannot access a disposed context instance. A common cause of this error is disposing a context instance that was resolved from dependency injection and then later trying to use the same context instance elsewhere in your application. This may occur if you are calling 'Dispose' on the context instance, or wrapping it in a using statement. If you are using dependency injection, you should let the dependency injection container take care of disposing context instances.\r\nObject name: 'IotDbContext'.","Navigations":"threw System.ObjectDisposedException: Cannot access a disposed context instance. A common cause of this error is disposing a context instance that was resolved from dependency injection and then later trying to use the same context instance elsewhere in your application. This may occur if you are calling 'Dispose' on the context instance, or wrapping it in a using statement. If you are using dependency injection, you should let the dependency injection container take care of disposing context instances.\r\nObject name: 'IotDbContext'.","Properties":[null,null,null,null,null,null,null,null,null,null],"References":[],"Collections":"threw System.ObjectDisposedException: Cannot access a disposed context instance. A common cause of this error is disposing a context instance that was resolved from dependency injection and then later trying to use the same context instance elsewhere in your application. This may occur if you are calling 'Dispose' on the context instance, or wrapping it in a using statement. If you are using dependency injection, you should let the dependency injection container take care of disposing context instances.\r\nObject name: 'IotDbContext'.","IsKeySet":true,"CurrentValues":{},"OriginalValues":{},"DebugView":{}}},{"IsModified":false,"IsTemporary":false,"Metadata":{"$ref":"33"},"OriginalValue":"DirectDevice","MemberEntry.Metadata":{"$ref":"33"},"CurrentValue":"DirectDevice","EntityEntry":{"Entity":{},"State":"Added","Context":{},"Metadata":{},"Members":"threw System.ObjectDisposedException: Cannot access a disposed context instance. A common cause of this error is disposing a context instance that was resolved from dependency injection and then later trying to use the same context instance elsewhere in your application. This may occur if you are calling 'Dispose' on the context instance, or wrapping it in a using statement. If you are using dependency injection, you should let the dependency injection container take care of disposing context instances.\r\nObject name: 'IotDbContext'.","Navigations":"threw System.ObjectDisposedException: Cannot access a disposed context instance. A common cause of this error is disposing a context instance that was resolved from dependency injection and then later trying to use the same context instance elsewhere in your application. This may occur if you are calling 'Dispose' on the context instance, or wrapping it in a using statement. If you are using dependency injection, you should let the dependency injection container take care of disposing context instances.\r\nObject name: 'IotDbContext'.","Properties":[null,null,null,null,null,null,null,null,null,null],"References":[],"Collections":"threw System.ObjectDisposedException: Cannot access a disposed context instance. A common cause of this error is disposing a context instance that was resolved from dependency injection and then later trying to use the same context instance elsewhere in your application. This may occur if you are calling 'Dispose' on the context instance, or wrapping it in a using statement. If you are using dependency injection, you should let the dependency injection container take care of disposing context instances.\r\nObject name: 'IotDbContext'.","IsKeySet":true,"CurrentValues":{},"OriginalValues":{},"DebugView":{}}},{"IsModified":false,"IsTemporary":false,"Metadata":{"$ref":"35"},"OriginalValue":"ModbusRTU","MemberEntry.Metadata":{"$ref":"35"},"CurrentValue":"ModbusRTU","EntityEntry":{"Entity":{},"State":"Added","Context":{},"Metadata":{},"Members":"threw System.ObjectDisposedException: Cannot access a disposed context instance. A common cause of this error is disposing a context instance that was resolved from dependency injection and then later trying to use the same context instance elsewhere in your application. This may occur if you are calling 'Dispose' on the context instance, or wrapping it in a using statement. If you are using dependency injection, you should let the dependency injection container take care of disposing context instances.\r\nObject name: 'IotDbContext'.","Navigations":"threw System.ObjectDisposedException: Cannot access a disposed context instance. A common cause of this error is disposing a context instance that was resolved from dependency injection and then later trying to use the same context instance elsewhere in your application. This may occur if you are calling 'Dispose' on the context instance, or wrapping it in a using statement. If you are using dependency injection, you should let the dependency injection container take care of disposing context instances.\r\nObject name: 'IotDbContext'.","Properties":[null,null,null,null,null,null,null,null,null,null],"References":[],"Collections":"threw System.ObjectDisposedException: Cannot access a disposed context instance. A common cause of this error is disposing a context instance that was resolved from dependency injection and then later trying to use the same context instance elsewhere in your application. This may occur if you are calling 'Dispose' on the context instance, or wrapping it in a using statement. If you are using dependency injection, you should let the dependency injection container take care of disposing context instances.\r\nObject name: 'IotDbContext'.","IsKeySet":true,"CurrentValues":{},"OriginalValues":{},"DebugView":{}}},{"IsModified":false,"IsTemporary":false,"Metadata":{"$ref":"36"},"OriginalValue":"123qweasd","MemberEntry.Metadata":{"$ref":"36"},"CurrentValue":"123qweasd","EntityEntry":{"Entity":{},"State":"Added","Context":{},"Metadata":{},"Members":"threw System.ObjectDisposedException: Cannot access a disposed context instance. A common cause of this error is disposing a context instance that was resolved from dependency injection and then later trying to use the same context instance elsewhere in your application. This may occur if you are calling 'Dispose' on the context instance, or wrapping it in a using statement. If you are using dependency injection, you should let the dependency injection container take care of disposing context instances.\r\nObject name: 'IotDbContext'.","Navigations":"threw System.ObjectDisposedException: Cannot access a disposed context instance. A common cause of this error is disposing a context instance that was resolved from dependency injection and then later trying to use the same context instance elsewhere in your application. This may occur if you are calling 'Dispose' on the context instance, or wrapping it in a using statement. If you are using dependency injection, you should let the dependency injection container take care of disposing context instances.\r\nObject name: 'IotDbContext'.","Properties":[null,null,null,null,null,null,null,null,null,null],"References":[],"Collections":"threw System.ObjectDisposedException: Cannot access a disposed context instance. A common cause of this error is disposing a context instance that was resolved from dependency injection and then later trying to use the same context instance elsewhere in your application. This may occur if you are calling 'Dispose' on the context instance, or wrapping it in a using statement. If you are using dependency injection, you should let the dependency injection container take care of disposing context instances.\r\nObject name: 'IotDbContext'.","IsKeySet":true,"CurrentValues":{},"OriginalValues":{},"DebugView":{}}}],"References":[],"Collections":"threw System.ObjectDisposedException: Cannot access a disposed context instance. A common cause of this error is disposing a context instance that was resolved from dependency injection and then later trying to use the same context instance elsewhere in your application. This may occur if you are calling 'Dispose' on the context instance, or wrapping it in a using statement. If you are using dependency injection, you should let the dependency injection container take care of disposing context instances.\r\nObject name: 'IotDbContext'.","IsKeySet":true,"CurrentValues":{"Properties":[{"$ref":"2"},{"$ref":"23"},{"$ref":"25"},{"$ref":"26"},{"$ref":"28"},{"$ref":"29"},{"$ref":"31"},{"$ref":"33"},{"$ref":"35"},{"$ref":"36"}],"EntityType":{"$ref":"1"}},"OriginalValues":{"Properties":[{"$ref":"2"},{"$ref":"23"},{"$ref":"25"},{"$ref":"26"},{"$ref":"28"},{"$ref":"29"},{"$ref":"31"},{"$ref":"33"},{"$ref":"35"},{"$ref":"36"}],"EntityType":{"$ref":"1"}},"DebugView":{"LongView":"Product {Id: 1} Added\r\n  Id: 1 PK\r\n  Category: <null>\r\n  Code: 'ele'\r\n  DataFormat: <null>\r\n  DeviceCount: 1\r\n  Name: '电梯'\r\n  NetType: 'MQTT'\r\n  NodeType: 'DirectDevice'\r\n  ProtocolType: 'ModbusRTU'\r\n  Secret: '123qweasd'\r\n  Devices: [{Id: 1}]","ShortView":"Product {Id: 1} Added"}}}],"References":[],"Collections":"threw System.ObjectDisposedException: Cannot access a disposed context instance. A common cause of this error is disposing a context instance that was resolved from dependency injection and then later trying to use the same context instance elsewhere in your application. This may occur if you are calling 'Dispose' on the context instance, or wrapping it in a using statement. If you are using dependency injection, you should let the dependency injection container take care of disposing context instances.\r\nObject name: 'IotDbContext'.","IsKeySet":true,"CurrentValues":{"Properties":[{"$ref":"2"},{"$ref":"23"},{"$ref":"25"},{"$ref":"26"},{"$ref":"28"},{"$ref":"29"},{"$ref":"31"},{"$ref":"33"},{"$ref":"35"},{"$ref":"36"}],"EntityType":{"$ref":"1"}},"OriginalValues":{"Properties":[{"$ref":"2"},{"$ref":"23"},{"$ref":"25"},{"$ref":"26"},{"$ref":"28"},{"$ref":"29"},{"$ref":"31"},{"$ref":"33"},{"$ref":"35"},{"$ref":"36"}],"EntityType":{"$ref":"1"}},"DebugView":{"LongView":"Product {Id: 1} Added\r\n  Id: 1 PK\r\n  Category: <null>\r\n  Code: 'ele'\r\n  DataFormat: <null>\r\n  DeviceCount: 1\r\n  Name: '电梯'\r\n  NetType: 'MQTT'\r\n  NodeType: 'DirectDevice'\r\n  ProtocolType: 'ModbusRTU'\r\n  Secret: '123qweasd'\r\n  Devices: [{Id: 1}]","ShortView":"Product {Id: 1} Added"}}],"Type":"Microsoft.EntityFrameworkCore.DbUpdateException"},"MachineName":"DESKTOP-RLSPV8H","Assembly":"Iot.WebApi"}
